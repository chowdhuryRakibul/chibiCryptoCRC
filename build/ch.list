
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002b9 	.word	0x080002b9
 8000008:	080002bb 	.word	0x080002bb
 800000c:	080002bb 	.word	0x080002bb
 8000010:	080002bb 	.word	0x080002bb
 8000014:	080002bb 	.word	0x080002bb
 8000018:	080002bb 	.word	0x080002bb
 800001c:	080002bb 	.word	0x080002bb
 8000020:	080002bb 	.word	0x080002bb
 8000024:	080002bb 	.word	0x080002bb
 8000028:	080002bb 	.word	0x080002bb
 800002c:	08001541 	.word	0x08001541
 8000030:	080002bb 	.word	0x080002bb
 8000034:	080002bb 	.word	0x080002bb
 8000038:	080002bb 	.word	0x080002bb
 800003c:	080002bb 	.word	0x080002bb
 8000040:	080002bb 	.word	0x080002bb
 8000044:	080002bb 	.word	0x080002bb
 8000048:	080002bb 	.word	0x080002bb
 800004c:	080002bb 	.word	0x080002bb
 8000050:	080002bb 	.word	0x080002bb
 8000054:	080002bb 	.word	0x080002bb
 8000058:	080002bb 	.word	0x080002bb
 800005c:	080002bb 	.word	0x080002bb
 8000060:	080002bb 	.word	0x080002bb
 8000064:	080002bb 	.word	0x080002bb
 8000068:	080002bb 	.word	0x080002bb
 800006c:	080002bb 	.word	0x080002bb
 8000070:	080002bb 	.word	0x080002bb
 8000074:	080002bb 	.word	0x080002bb
 8000078:	080002bb 	.word	0x080002bb
 800007c:	080002bb 	.word	0x080002bb
 8000080:	080002bb 	.word	0x080002bb
 8000084:	080002bb 	.word	0x080002bb
 8000088:	080002bb 	.word	0x080002bb
 800008c:	080002bb 	.word	0x080002bb
 8000090:	080002bb 	.word	0x080002bb
 8000094:	080002bb 	.word	0x080002bb
 8000098:	080002bb 	.word	0x080002bb
 800009c:	080002bb 	.word	0x080002bb
 80000a0:	080002bb 	.word	0x080002bb
 80000a4:	080002bb 	.word	0x080002bb
 80000a8:	080002bb 	.word	0x080002bb
 80000ac:	080002bb 	.word	0x080002bb
 80000b0:	08001a21 	.word	0x08001a21
 80000b4:	080002bb 	.word	0x080002bb
 80000b8:	080002bb 	.word	0x080002bb
 80000bc:	080002bb 	.word	0x080002bb
 80000c0:	080002bb 	.word	0x080002bb
 80000c4:	080002bb 	.word	0x080002bb
 80000c8:	080002bb 	.word	0x080002bb
 80000cc:	080002bb 	.word	0x080002bb
 80000d0:	080002bb 	.word	0x080002bb
 80000d4:	080002bb 	.word	0x080002bb
 80000d8:	080002bb 	.word	0x080002bb
 80000dc:	080002bb 	.word	0x080002bb
 80000e0:	080002bb 	.word	0x080002bb
 80000e4:	080002bb 	.word	0x080002bb
 80000e8:	080002bb 	.word	0x080002bb
 80000ec:	080002bb 	.word	0x080002bb
 80000f0:	080002bb 	.word	0x080002bb
 80000f4:	080002bb 	.word	0x080002bb
 80000f8:	080002bb 	.word	0x080002bb
 80000fc:	080002bb 	.word	0x080002bb
 8000100:	080002bb 	.word	0x080002bb
 8000104:	080002bb 	.word	0x080002bb
 8000108:	080002bb 	.word	0x080002bb
 800010c:	080002bb 	.word	0x080002bb
 8000110:	080002bb 	.word	0x080002bb
 8000114:	080002bb 	.word	0x080002bb
 8000118:	080002bb 	.word	0x080002bb
 800011c:	080002bb 	.word	0x080002bb
 8000120:	080002bb 	.word	0x080002bb
 8000124:	080002bb 	.word	0x080002bb
 8000128:	080002bb 	.word	0x080002bb
 800012c:	080002bb 	.word	0x080002bb
 8000130:	080002bb 	.word	0x080002bb
 8000134:	080002bb 	.word	0x080002bb
 8000138:	080002bb 	.word	0x080002bb
 800013c:	080002bb 	.word	0x080002bb
 8000140:	080002bb 	.word	0x080002bb
 8000144:	080002bb 	.word	0x080002bb
 8000148:	080002bb 	.word	0x080002bb
 800014c:	080002bb 	.word	0x080002bb
 8000150:	080002bb 	.word	0x080002bb
 8000154:	080002bb 	.word	0x080002bb
 8000158:	080002bb 	.word	0x080002bb
 800015c:	08001861 	.word	0x08001861
 8000160:	080002bb 	.word	0x080002bb
 8000164:	080002bb 	.word	0x080002bb
 8000168:	080002bb 	.word	0x080002bb
 800016c:	080002bb 	.word	0x080002bb
 8000170:	080002bb 	.word	0x080002bb
 8000174:	080002bb 	.word	0x080002bb
 8000178:	080002bb 	.word	0x080002bb
 800017c:	080002bb 	.word	0x080002bb
 8000180:	080002bb 	.word	0x080002bb
 8000184:	080002bb 	.word	0x080002bb
 8000188:	080002bb 	.word	0x080002bb
 800018c:	080002bb 	.word	0x080002bb
 8000190:	080002bb 	.word	0x080002bb
 8000194:	080002bb 	.word	0x080002bb
 8000198:	080002bb 	.word	0x080002bb
 800019c:	080002bb 	.word	0x080002bb
 80001a0:	080002bb 	.word	0x080002bb
 80001a4:	080002bb 	.word	0x080002bb
 80001a8:	080002bb 	.word	0x080002bb
 80001ac:	080002bb 	.word	0x080002bb
 80001b0:	080002bb 	.word	0x080002bb
 80001b4:	080002bb 	.word	0x080002bb
 80001b8:	080002bb 	.word	0x080002bb
 80001bc:	080002bb 	.word	0x080002bb
 80001c0:	080002bb 	.word	0x080002bb
 80001c4:	080002bb 	.word	0x080002bb
 80001c8:	080002bb 	.word	0x080002bb
 80001cc:	080002bb 	.word	0x080002bb
 80001d0:	080002bb 	.word	0x080002bb
 80001d4:	080002bb 	.word	0x080002bb
 80001d8:	080002bb 	.word	0x080002bb
 80001dc:	080002bb 	.word	0x080002bb

Disassembly of section .text:

080001e0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001e0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001e2:	4827      	ldr	r0, [pc, #156]	; (8000280 <endfiniloop+0x4>)
                msr     MSP, r0
 80001e4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001e8:	4826      	ldr	r0, [pc, #152]	; (8000284 <endfiniloop+0x8>)
                msr     PSP, r0
 80001ea:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ee:	4826      	ldr	r0, [pc, #152]	; (8000288 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001f0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001f4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001f8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001fa:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001fc:	f380 8814 	msr	CONTROL, r0
                isb
 8000200:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000204:	f001 fcac 	bl	8001b60 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000208:	f001 f9f2 	bl	80015f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800020c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000210:	491e      	ldr	r1, [pc, #120]	; (800028c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000212:	4a1b      	ldr	r2, [pc, #108]	; (8000280 <endfiniloop+0x4>)

08000214 <msloop>:
msloop:
                cmp     r1, r2
 8000214:	4291      	cmp	r1, r2
                itt     lo
 8000216:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000218:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800021c:	e7fa      	bcc.n	8000214 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800021e:	491c      	ldr	r1, [pc, #112]	; (8000290 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 8000220:	4a18      	ldr	r2, [pc, #96]	; (8000284 <endfiniloop+0x8>)

08000222 <psloop>:
psloop:
                cmp     r1, r2
 8000222:	4291      	cmp	r1, r2
                itt     lo
 8000224:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000226:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 800022a:	e7fa      	bcc.n	8000222 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 800022c:	4919      	ldr	r1, [pc, #100]	; (8000294 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 800022e:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 8000230:	4b1a      	ldr	r3, [pc, #104]	; (800029c <endfiniloop+0x20>)

08000232 <dloop>:
dloop:
                cmp     r2, r3
 8000232:	429a      	cmp	r2, r3
                ittt    lo
 8000234:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 8000236:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 800023a:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 800023e:	e7f8      	bcc.n	8000232 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000240:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000242:	4917      	ldr	r1, [pc, #92]	; (80002a0 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <endfiniloop+0x28>)

08000246 <bloop>:
bloop:
                cmp     r1, r2
 8000246:	4291      	cmp	r1, r2
                itt     lo
 8000248:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800024a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800024e:	e7fa      	bcc.n	8000246 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000250:	f001 fc3e 	bl	8001ad0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000254:	f001 fc7c 	bl	8001b50 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000258:	4c13      	ldr	r4, [pc, #76]	; (80002a8 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800025a:	4d14      	ldr	r5, [pc, #80]	; (80002ac <endfiniloop+0x30>)

0800025c <initloop>:
initloop:
                cmp     r4, r5
 800025c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800025e:	da03      	bge.n	8000268 <endinitloop>
                ldr     r1, [r4], #4
 8000260:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000264:	4788      	blx	r1
                b       initloop
 8000266:	e7f9      	b.n	800025c <initloop>

08000268 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000268:	f000 fe7a 	bl	8000f60 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800026c:	4c10      	ldr	r4, [pc, #64]	; (80002b0 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800026e:	4d11      	ldr	r5, [pc, #68]	; (80002b4 <endfiniloop+0x38>)

08000270 <finiloop>:
finiloop:
                cmp     r4, r5
 8000270:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000272:	da03      	bge.n	800027c <endfiniloop>
                ldr     r1, [r4], #4
 8000274:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000278:	4788      	blx	r1
                b       finiloop
 800027a:	e7f9      	b.n	8000270 <finiloop>

0800027c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800027c:	f001 bc60 	b.w	8001b40 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000280:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000284:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000288:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800028c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000290:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000294:	08001cd4 	.word	0x08001cd4
                ldr     r2, =__data_base__
 8000298:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800029c:	20000800 	.word	0x20000800
                ldr     r1, =__bss_base__
 80002a0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
 80002a4:	20000e3c 	.word	0x20000e3c
                ldr     r4, =__init_array_base__
 80002a8:	080001e0 	.word	0x080001e0
                ldr     r5, =__init_array_end__
 80002ac:	080001e0 	.word	0x080001e0
                ldr     r4, =__fini_array_base__
 80002b0:	080001e0 	.word	0x080001e0
                ldr     r5, =__fini_array_end__
 80002b4:	080001e0 	.word	0x080001e0

080002b8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002b8:	e792      	b.n	80001e0 <_crt0_entry>

080002ba <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 80002ba:	f000 f800 	bl	80002be <_unhandled_exception>

080002be <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002be:	e7fe      	b.n	80002be <_unhandled_exception>

080002c0 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002c4:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002c8:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002ca:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002d0 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002d0:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002d2:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002d6:	4628      	mov	r0, r5
                blx     r4
 80002d8:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 80002da:	2000      	movs	r0, #0
                bl      chThdExit
 80002dc:	f001 f940 	bl	8001560 <chThdExit>

080002e0 <_zombies>:
_zombies:       b       _zombies
 80002e0:	e7fe      	b.n	80002e0 <_zombies>

080002e2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80002e2:	f001 f965 	bl	80015b0 <chSchDoReschedule>

080002e6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002e6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002e8:	e7fe      	b.n	80002e8 <_port_exit_from_isr+0x2>
	...

080002ec <memcpy>:
 80002ec:	4684      	mov	ip, r0
 80002ee:	ea41 0300 	orr.w	r3, r1, r0
 80002f2:	f013 0303 	ands.w	r3, r3, #3
 80002f6:	d16d      	bne.n	80003d4 <memcpy+0xe8>
 80002f8:	3a40      	subs	r2, #64	; 0x40
 80002fa:	d341      	bcc.n	8000380 <memcpy+0x94>
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	f851 3b04 	ldr.w	r3, [r1], #4
 8000348:	f840 3b04 	str.w	r3, [r0], #4
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000370:	f840 3b04 	str.w	r3, [r0], #4
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a40      	subs	r2, #64	; 0x40
 800037e:	d2bd      	bcs.n	80002fc <memcpy+0x10>
 8000380:	3230      	adds	r2, #48	; 0x30
 8000382:	d311      	bcc.n	80003a8 <memcpy+0xbc>
 8000384:	f851 3b04 	ldr.w	r3, [r1], #4
 8000388:	f840 3b04 	str.w	r3, [r0], #4
 800038c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000390:	f840 3b04 	str.w	r3, [r0], #4
 8000394:	f851 3b04 	ldr.w	r3, [r1], #4
 8000398:	f840 3b04 	str.w	r3, [r0], #4
 800039c:	f851 3b04 	ldr.w	r3, [r1], #4
 80003a0:	f840 3b04 	str.w	r3, [r0], #4
 80003a4:	3a10      	subs	r2, #16
 80003a6:	d2ed      	bcs.n	8000384 <memcpy+0x98>
 80003a8:	320c      	adds	r2, #12
 80003aa:	d305      	bcc.n	80003b8 <memcpy+0xcc>
 80003ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80003b0:	f840 3b04 	str.w	r3, [r0], #4
 80003b4:	3a04      	subs	r2, #4
 80003b6:	d2f9      	bcs.n	80003ac <memcpy+0xc0>
 80003b8:	3204      	adds	r2, #4
 80003ba:	d008      	beq.n	80003ce <memcpy+0xe2>
 80003bc:	07d2      	lsls	r2, r2, #31
 80003be:	bf1c      	itt	ne
 80003c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003c4:	f800 3b01 	strbne.w	r3, [r0], #1
 80003c8:	d301      	bcc.n	80003ce <memcpy+0xe2>
 80003ca:	880b      	ldrh	r3, [r1, #0]
 80003cc:	8003      	strh	r3, [r0, #0]
 80003ce:	4660      	mov	r0, ip
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	2a08      	cmp	r2, #8
 80003d6:	d313      	bcc.n	8000400 <memcpy+0x114>
 80003d8:	078b      	lsls	r3, r1, #30
 80003da:	d08d      	beq.n	80002f8 <memcpy+0xc>
 80003dc:	f010 0303 	ands.w	r3, r0, #3
 80003e0:	d08a      	beq.n	80002f8 <memcpy+0xc>
 80003e2:	f1c3 0304 	rsb	r3, r3, #4
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	07db      	lsls	r3, r3, #31
 80003ea:	bf1c      	itt	ne
 80003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003f0:	f800 3b01 	strbne.w	r3, [r0], #1
 80003f4:	d380      	bcc.n	80002f8 <memcpy+0xc>
 80003f6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003fa:	f820 3b02 	strh.w	r3, [r0], #2
 80003fe:	e77b      	b.n	80002f8 <memcpy+0xc>
 8000400:	3a04      	subs	r2, #4
 8000402:	d3d9      	bcc.n	80003b8 <memcpy+0xcc>
 8000404:	3a01      	subs	r2, #1
 8000406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800040a:	f800 3b01 	strb.w	r3, [r0], #1
 800040e:	d2f9      	bcs.n	8000404 <memcpy+0x118>
 8000410:	780b      	ldrb	r3, [r1, #0]
 8000412:	7003      	strb	r3, [r0, #0]
 8000414:	784b      	ldrb	r3, [r1, #1]
 8000416:	7043      	strb	r3, [r0, #1]
 8000418:	788b      	ldrb	r3, [r1, #2]
 800041a:	7083      	strb	r3, [r0, #2]
 800041c:	4660      	mov	r0, ip
 800041e:	4770      	bx	lr

08000420 <_pal_lld_setgroupmode.constprop.10>:
 * @param[in] mask      the group mask
 * @param[in] mode      the mode
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
 8000420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
 8000424:	2100      	movs	r1, #0

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8000426:	4c21      	ldr	r4, [pc, #132]	; (80004ac <_pal_lld_setgroupmode.constprop.10+0x8c>)
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8000428:	2502      	movs	r5, #2
      altrmask = altr << ((bit & 7) * 4);
 800042a:	f04f 0808 	mov.w	r8, #8
      m1 = 1 << bit;
 800042e:	f04f 0e01 	mov.w	lr, #1
      m2 = 3 << (bit * 2);
 8000432:	f04f 0c03 	mov.w	ip, #3
      m4 = 15 << ((bit & 7) * 4);
 8000436:	270f      	movs	r7, #15
 8000438:	e00d      	b.n	8000456 <_pal_lld_setgroupmode.constprop.10+0x36>
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800043a:	6a26      	ldr	r6, [r4, #32]
 800043c:	ea06 0909 	and.w	r9, r6, r9
 8000440:	ea49 0202 	orr.w	r2, r9, r2
 8000444:	6222      	str	r2, [r4, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000446:	6822      	ldr	r2, [r4, #0]
 8000448:	4013      	ands	r3, r2
 800044a:	432b      	orrs	r3, r5
 800044c:	6023      	str	r3, [r4, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 800044e:	0840      	lsrs	r0, r0, #1
 8000450:	d029      	beq.n	80004a6 <_pal_lld_setgroupmode.constprop.10+0x86>
      return;
    otyper <<= 1;
    ospeedr <<= 2;
    pupdr <<= 2;
    moder <<= 2;
 8000452:	00ad      	lsls	r5, r5, #2
    bit++;
 8000454:	3101      	adds	r1, #1
      altrmask = altr << ((bit & 7) * 4);
 8000456:	f001 0207 	and.w	r2, r1, #7
 800045a:	0092      	lsls	r2, r2, #2
      m2 = 3 << (bit * 2);
 800045c:	004b      	lsls	r3, r1, #1
      m4 = 15 << ((bit & 7) * 4);
 800045e:	fa07 f902 	lsl.w	r9, r7, r2
      m2 = 3 << (bit * 2);
 8000462:	fa0c f303 	lsl.w	r3, ip, r3
    if ((mask & 1) != 0) {
 8000466:	f010 0f01 	tst.w	r0, #1
      m1 = 1 << bit;
 800046a:	fa0e f601 	lsl.w	r6, lr, r1
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 800046e:	ea6f 0303 	mvn.w	r3, r3
      altrmask = altr << ((bit & 7) * 4);
 8000472:	fa08 f202 	lsl.w	r2, r8, r2
 8000476:	ea6f 0909 	mvn.w	r9, r9
    if ((mask & 1) != 0) {
 800047a:	d0e8      	beq.n	800044e <_pal_lld_setgroupmode.constprop.10+0x2e>
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800047c:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8000480:	ea2a 0606 	bic.w	r6, sl, r6
 8000484:	6066      	str	r6, [r4, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000486:	68a6      	ldr	r6, [r4, #8]
 8000488:	401e      	ands	r6, r3
 800048a:	60a6      	str	r6, [r4, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 800048c:	68e6      	ldr	r6, [r4, #12]
        if (bit < 8)
 800048e:	2907      	cmp	r1, #7
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000490:	ea06 0603 	and.w	r6, r6, r3
 8000494:	60e6      	str	r6, [r4, #12]
        if (bit < 8)
 8000496:	d9d0      	bls.n	800043a <_pal_lld_setgroupmode.constprop.10+0x1a>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000498:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800049a:	ea06 0909 	and.w	r9, r6, r9
 800049e:	ea49 0202 	orr.w	r2, r9, r2
 80004a2:	6262      	str	r2, [r4, #36]	; 0x24
 80004a4:	e7cf      	b.n	8000446 <_pal_lld_setgroupmode.constprop.10+0x26>
  }
}
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	bf00      	nop
 80004ac:	40020800 	.word	0x40020800

080004b0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80004b0:	b430      	push	{r4, r5}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80004b2:	2320      	movs	r3, #32
 80004b4:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80004b8:	4c0b      	ldr	r4, [pc, #44]	; (80004e8 <chCoreAllocFromTop+0x38>)
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80004ba:	e9d4 3500 	ldrd	r3, r5, [r4]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 80004be:	4249      	negs	r1, r1
 80004c0:	1a28      	subs	r0, r5, r0
 80004c2:	4008      	ands	r0, r1
  prev = p - offset;
 80004c4:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d307      	bcc.n	80004da <chCoreAllocFromTop+0x2a>
 80004ca:	4295      	cmp	r5, r2
 80004cc:	d305      	bcc.n	80004da <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 80004ce:	6062      	str	r2, [r4, #4]
 80004d0:	2300      	movs	r3, #0
 80004d2:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 80004d6:	bc30      	pop	{r4, r5}
 80004d8:	4770      	bx	lr
    return NULL;
 80004da:	2000      	movs	r0, #0
 80004dc:	2300      	movs	r3, #0
 80004de:	f383 8811 	msr	BASEPRI, r3
}
 80004e2:	bc30      	pop	{r4, r5}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	20000a18 	.word	0x20000a18
 80004ec:	00000000 	.word	0x00000000

080004f0 <notify6>:

#if STM32_SERIAL_USE_USART6 || defined(__DOXYGEN__)
static void notify6(io_queue_t *qp) {

  (void)qp;
  USART6->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80004f0:	4a02      	ldr	r2, [pc, #8]	; (80004fc <notify6+0xc>)
 80004f2:	68d3      	ldr	r3, [r2, #12]
 80004f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80004f8:	60d3      	str	r3, [r2, #12]
}
 80004fa:	4770      	bx	lr
 80004fc:	40011400 	.word	0x40011400

08000500 <_port_irq_epilogue>:
 8000500:	2320      	movs	r3, #32
 8000502:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <_port_irq_epilogue+0x3c>)
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800050e:	d102      	bne.n	8000516 <_port_irq_epilogue+0x16>
 8000510:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000514:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000516:	f3ef 8309 	mrs	r3, PSP
    s_psp -= sizeof (struct port_extctx);
 800051a:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 800051c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000520:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000522:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000526:	4a06      	ldr	r2, [pc, #24]	; (8000540 <_port_irq_epilogue+0x40>)
 8000528:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800052a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800052c:	6889      	ldr	r1, [r1, #8]
 800052e:	6892      	ldr	r2, [r2, #8]
 8000530:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000532:	bf8c      	ite	hi
 8000534:	4a03      	ldrhi	r2, [pc, #12]	; (8000544 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000536:	4a04      	ldrls	r2, [pc, #16]	; (8000548 <_port_irq_epilogue+0x48>)
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4770      	bx	lr
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	2000087c 	.word	0x2000087c
 8000544:	080002e3 	.word	0x080002e3
 8000548:	080002e6 	.word	0x080002e6
 800054c:	00000000 	.word	0x00000000

08000550 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <chCoreAllocAlignedI+0x24>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000552:	b410      	push	{r4}
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000554:	e9d3 4200 	ldrd	r4, r2, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000558:	4249      	negs	r1, r1
 800055a:	1a10      	subs	r0, r2, r0
 800055c:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800055e:	42a0      	cmp	r0, r4
 8000560:	d304      	bcc.n	800056c <chCoreAllocAlignedI+0x1c>
 8000562:	4282      	cmp	r2, r0
 8000564:	d302      	bcc.n	800056c <chCoreAllocAlignedI+0x1c>
  ch_memcore.topmem = prev;
 8000566:	6058      	str	r0, [r3, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000568:	bc10      	pop	{r4}
 800056a:	4770      	bx	lr
    return NULL;
 800056c:	2000      	movs	r0, #0
 800056e:	bc10      	pop	{r4}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000a18 	.word	0x20000a18
	...

08000580 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000582:	4a0f      	ldr	r2, [pc, #60]	; (80005c0 <chTMStopMeasurementX+0x40>)
 8000584:	685b      	ldr	r3, [r3, #4]
  tmp->n++;
 8000586:	68c1      	ldr	r1, [r0, #12]
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000588:	b4f0      	push	{r4, r5, r6, r7}
  tmp->last = (now - tmp->last) - offset;
 800058a:	6884      	ldr	r4, [r0, #8]
  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 800058c:	6f56      	ldr	r6, [r2, #116]	; 0x74
  if (tmp->last > tmp->worst) {
 800058e:	6842      	ldr	r2, [r0, #4]
  tmp->last = (now - tmp->last) - offset;
 8000590:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 8000592:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 8000596:	1b9b      	subs	r3, r3, r6
  tmp->cumulative += (rttime_t)tmp->last;
 8000598:	18e6      	adds	r6, r4, r3
 800059a:	f145 0700 	adc.w	r7, r5, #0
  if (tmp->last > tmp->worst) {
 800059e:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80005a0:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80005a2:	bf88      	it	hi
 80005a4:	6043      	strhi	r3, [r0, #4]
  tmp->n++;
 80005a6:	3101      	adds	r1, #1
  if (tmp->last < tmp->best) {
 80005a8:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80005aa:	e9c0 6704 	strd	r6, r7, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 80005ae:	e9c0 3102 	strd	r3, r1, [r0, #8]
    tmp->best = tmp->last;
 80005b2:	bf38      	it	cc
 80005b4:	6003      	strcc	r3, [r0, #0]
}
 80005b6:	bcf0      	pop	{r4, r5, r6, r7}
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e0001000 	.word	0xe0001000
 80005c0:	2000087c 	.word	0x2000087c
	...

080005d0 <chTMStartMeasurementX>:
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <chTMStartMeasurementX+0x8>)
 80005d2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80005d4:	6083      	str	r3, [r0, #8]
}
 80005d6:	4770      	bx	lr
 80005d8:	e0001000 	.word	0xe0001000
 80005dc:	00000000 	.word	0x00000000

080005e0 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80005e0:	2320      	movs	r3, #32
 80005e2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80005e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80005ea:	2b07      	cmp	r3, #7
 80005ec:	d80e      	bhi.n	800060c <wakeup+0x2c>
 80005ee:	e8df f003 	tbb	[pc, r3]
 80005f2:	0d28      	.short	0x0d28
 80005f4:	0408240d 	.word	0x0408240d
 80005f8:	080d      	.short	0x080d
    chSemFastSignalI(tp->u.wtsemp);
 80005fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80005fc:	6893      	ldr	r3, [r2, #8]
 80005fe:	3301      	adds	r3, #1
 8000600:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000602:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000606:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000608:	6802      	ldr	r2, [r0, #0]
 800060a:	6053      	str	r3, [r2, #4]
static void wakeup(void *p) {
 800060c:	b410      	push	{r4}
  tp->state = CH_STATE_READY;
 800060e:	2200      	movs	r2, #0
  tp->u.rdymsg = MSG_TIMEOUT;
 8000610:	f04f 34ff 	mov.w	r4, #4294967295
  } while (cp->prio >= tp->prio);
 8000614:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <wakeup+0x6c>)
  tp->u.rdymsg = MSG_TIMEOUT;
 8000618:	6244      	str	r4, [r0, #36]	; 0x24
  tp->state = CH_STATE_READY;
 800061a:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800061e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8000620:	689a      	ldr	r2, [r3, #8]
 8000622:	428a      	cmp	r2, r1
 8000624:	d2fb      	bcs.n	800061e <wakeup+0x3e>
  tp->queue.prev             = cp->queue.prev;
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	2100      	movs	r1, #0
 800062a:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800062e:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 8000630:	6058      	str	r0, [r3, #4]
 8000632:	f381 8811 	msr	BASEPRI, r1
}
 8000636:	bc10      	pop	{r4}
 8000638:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 800063a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	e7e4      	b.n	800060c <wakeup+0x2c>
 8000642:	2300      	movs	r3, #0
 8000644:	f383 8811 	msr	BASEPRI, r3
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	2000087c 	.word	0x2000087c

08000650 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8000650:	4601      	mov	r1, r0
  tp->state = CH_STATE_READY;
 8000652:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <chSchReadyI+0x24>)
  } while (cp->prio >= tp->prio);
 8000656:	6880      	ldr	r0, [r0, #8]
  tp->state = CH_STATE_READY;
 8000658:	f881 2020 	strb.w	r2, [r1, #32]
    cp = cp->queue.next;
 800065c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	4282      	cmp	r2, r0
 8000662:	d2fb      	bcs.n	800065c <chSchReadyI+0xc>
  tp->queue.prev             = cp->queue.prev;
 8000664:	685a      	ldr	r2, [r3, #4]
}
 8000666:	4608      	mov	r0, r1
  tp->queue.prev             = cp->queue.prev;
 8000668:	e9c1 3200 	strd	r3, r2, [r1]
  tp->queue.prev->queue.next = tp;
 800066c:	6011      	str	r1, [r2, #0]
  cp->queue.prev             = tp;
 800066e:	6059      	str	r1, [r3, #4]
}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000087c 	.word	0x2000087c
	...

08000680 <chEvtBroadcastFlagsI.constprop.12>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 8000682:	4f16      	ldr	r7, [pc, #88]	; (80006dc <chEvtBroadcastFlagsI.constprop.12+0x5c>)
 8000684:	f857 4f04 	ldr.w	r4, [r7, #4]!
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8000688:	42bc      	cmp	r4, r7
 800068a:	d020      	beq.n	80006ce <chEvtBroadcastFlagsI.constprop.12+0x4e>
 800068c:	4605      	mov	r5, r0
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800068e:	2600      	movs	r6, #0
 8000690:	e004      	b.n	800069c <chEvtBroadcastFlagsI.constprop.12+0x1c>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8000692:	2a0b      	cmp	r2, #11
 8000694:	d01c      	beq.n	80006d0 <chEvtBroadcastFlagsI.constprop.12+0x50>
    elp = elp->next;
 8000696:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000698:	42bc      	cmp	r4, r7
 800069a:	d018      	beq.n	80006ce <chEvtBroadcastFlagsI.constprop.12+0x4e>
    elp->flags |= flags;
 800069c:	68e3      	ldr	r3, [r4, #12]
 800069e:	432b      	orrs	r3, r5
 80006a0:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80006a2:	b115      	cbz	r5, 80006aa <chEvtBroadcastFlagsI.constprop.12+0x2a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80006a4:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80006a6:	421d      	tst	r5, r3
 80006a8:	d0f5      	beq.n	8000696 <chEvtBroadcastFlagsI.constprop.12+0x16>
  tp->epending |= events;
 80006aa:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80006ae:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006b0:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 80006b4:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006b6:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 80006b8:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006ba:	d1ea      	bne.n	8000692 <chEvtBroadcastFlagsI.constprop.12+0x12>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80006bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80006be:	4213      	tst	r3, r2
 80006c0:	d0e9      	beq.n	8000696 <chEvtBroadcastFlagsI.constprop.12+0x16>
    tp->u.rdymsg = MSG_OK;
 80006c2:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 80006c4:	f7ff ffc4 	bl	8000650 <chSchReadyI>
    elp = elp->next;
 80006c8:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80006ca:	42bc      	cmp	r4, r7
 80006cc:	d1e6      	bne.n	800069c <chEvtBroadcastFlagsI.constprop.12+0x1c>
}
 80006ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80006d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80006d2:	ea32 0303 	bics.w	r3, r2, r3
 80006d6:	d1de      	bne.n	8000696 <chEvtBroadcastFlagsI.constprop.12+0x16>
 80006d8:	e7f3      	b.n	80006c2 <chEvtBroadcastFlagsI.constprop.12+0x42>
 80006da:	bf00      	nop
 80006dc:	20000800 	.word	0x20000800

080006e0 <_idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80006e0:	e7fe      	b.n	80006e0 <_idle_thread>
 80006e2:	bf00      	nop
	...

080006f0 <_ctl>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 80006f0:	2000      	movs	r0, #0
 80006f2:	4770      	bx	lr
	...

08000700 <chSchGoSleepS>:
  thread_t *otp = currp;
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <chSchGoSleepS+0x24>)
 8000702:	6999      	ldr	r1, [r3, #24]
  thread_t *tp = tqp->next;
 8000704:	681a      	ldr	r2, [r3, #0]
void chSchGoSleepS(tstate_t newstate) {
 8000706:	b410      	push	{r4}
  otp->state = newstate;
 8000708:	f881 0020 	strb.w	r0, [r1, #32]
  tqp->next             = tp->queue.next;
 800070c:	6810      	ldr	r0, [r2, #0]
 800070e:	6018      	str	r0, [r3, #0]
  currp->state = CH_STATE_CURRENT;
 8000710:	2401      	movs	r4, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8000712:	6043      	str	r3, [r0, #4]
 8000714:	f882 4020 	strb.w	r4, [r2, #32]
  chSysSwitch(currp, otp);
 8000718:	4610      	mov	r0, r2
}
 800071a:	bc10      	pop	{r4}
  currp = queue_fifo_remove(&ch.rlist.queue);
 800071c:	619a      	str	r2, [r3, #24]
  chSysSwitch(currp, otp);
 800071e:	f7ff bdcf 	b.w	80002c0 <_port_switch>
 8000722:	bf00      	nop
 8000724:	2000087c 	.word	0x2000087c
	...

08000730 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (TIME_INFINITE != timeout) {
 8000732:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8000734:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8000736:	d04c      	beq.n	80007d2 <chSchGoSleepTimeoutS+0xa2>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8000738:	4c41      	ldr	r4, [pc, #260]	; (8000840 <chSchGoSleepTimeoutS+0x110>)
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800073a:	4625      	mov	r5, r4
 800073c:	2902      	cmp	r1, #2
 800073e:	f855 2f1c 	ldr.w	r2, [r5, #28]!
  vtp->par = par;
 8000742:	69a3      	ldr	r3, [r4, #24]
 8000744:	9305      	str	r3, [sp, #20]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000746:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
 800074a:	4607      	mov	r7, r0
 800074c:	bf38      	it	cc
 800074e:	2102      	movcc	r1, #2
  vtp->func = vtfunc;
 8000750:	483c      	ldr	r0, [pc, #240]	; (8000844 <chSchGoSleepTimeoutS+0x114>)
 8000752:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 8000756:	9004      	str	r0, [sp, #16]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8000758:	42aa      	cmp	r2, r5
 800075a:	d05b      	beq.n	8000814 <chSchGoSleepTimeoutS+0xe4>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800075c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800075e:	6890      	ldr	r0, [r2, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000760:	1b9b      	subs	r3, r3, r6
 8000762:	1859      	adds	r1, r3, r1

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8000764:	d32f      	bcc.n	80007c6 <chSchGoSleepTimeoutS+0x96>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 8000766:	6812      	ldr	r2, [r2, #0]
      delta -= p->delta;
 8000768:	1a09      	subs	r1, r1, r0
 800076a:	6890      	ldr	r0, [r2, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800076c:	4281      	cmp	r1, r0
 800076e:	d904      	bls.n	800077a <chSchGoSleepTimeoutS+0x4a>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 8000770:	6812      	ldr	r2, [r2, #0]
    delta -= p->delta;
 8000772:	1a09      	subs	r1, r1, r0
  while (p->delta < delta) {
 8000774:	6890      	ldr	r0, [r2, #8]
 8000776:	4288      	cmp	r0, r1
 8000778:	d3fa      	bcc.n	8000770 <chSchGoSleepTimeoutS+0x40>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800077a:	6853      	ldr	r3, [r2, #4]
 800077c:	9302      	str	r3, [sp, #8]
  vtp->prev->next = vtp;
 800077e:	ae01      	add	r6, sp, #4
  vtp->next = p;
 8000780:	9201      	str	r2, [sp, #4]
  vtp->prev->next = vtp;
 8000782:	601e      	str	r6, [r3, #0]
  p->prev = vtp;
 8000784:	6056      	str	r6, [r2, #4]
  vtp->delta = delta;
 8000786:	9103      	str	r1, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8000788:	6893      	ldr	r3, [r2, #8]
 800078a:	1a59      	subs	r1, r3, r1

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 800078c:	f04f 33ff 	mov.w	r3, #4294967295
  p->delta -= delta;
 8000790:	6091      	str	r1, [r2, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 8000792:	6263      	str	r3, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 8000794:	4638      	mov	r0, r7
 8000796:	f7ff ffb3 	bl	8000700 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 800079a:	9b04      	ldr	r3, [sp, #16]
 800079c:	b17b      	cbz	r3, 80007be <chSchGoSleepTimeoutS+0x8e>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800079e:	69e2      	ldr	r2, [r4, #28]
 80007a0:	9b01      	ldr	r3, [sp, #4]
 80007a2:	42b2      	cmp	r2, r6
 80007a4:	d01c      	beq.n	80007e0 <chSchGoSleepTimeoutS+0xb0>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80007a6:	9a02      	ldr	r2, [sp, #8]
 80007a8:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80007aa:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 80007ac:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80007ae:	42ab      	cmp	r3, r5
    vtp->next->prev = vtp->prev;
 80007b0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80007b2:	9104      	str	r1, [sp, #16]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80007b4:	d003      	beq.n	80007be <chSchGoSleepTimeoutS+0x8e>
      vtp->next->delta += vtp->delta;
 80007b6:	689a      	ldr	r2, [r3, #8]
 80007b8:	9903      	ldr	r1, [sp, #12]
 80007ba:	440a      	add	r2, r1
 80007bc:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 80007be:	69a3      	ldr	r3, [r4, #24]
}
 80007c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80007c2:	b007      	add	sp, #28
 80007c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 80007c6:	4281      	cmp	r1, r0
 80007c8:	d2d0      	bcs.n	800076c <chSchGoSleepTimeoutS+0x3c>
  return systime + (systime_t)interval;
 80007ca:	440e      	add	r6, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80007cc:	f8cc 6034 	str.w	r6, [ip, #52]	; 0x34
 80007d0:	e7cc      	b.n	800076c <chSchGoSleepTimeoutS+0x3c>
 80007d2:	4c1b      	ldr	r4, [pc, #108]	; (8000840 <chSchGoSleepTimeoutS+0x110>)
    chSchGoSleepS(newstate);
 80007d4:	f7ff ff94 	bl	8000700 <chSchGoSleepS>
  return currp->u.rdymsg;
 80007d8:	69a3      	ldr	r3, [r4, #24]
}
 80007da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80007dc:	b007      	add	sp, #28
 80007de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80007e0:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80007e2:	42ab      	cmp	r3, r5
  ch.vtlist.next = vtp->next;
 80007e4:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80007e6:	605d      	str	r5, [r3, #4]
  vtp->func = NULL;
 80007e8:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80007ea:	d024      	beq.n	8000836 <chSchGoSleepTimeoutS+0x106>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80007ec:	689a      	ldr	r2, [r3, #8]
 80007ee:	9803      	ldr	r0, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80007f0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 80007f2:	4402      	add	r2, r0
  return (systime_t)STM32_ST_TIM->CNT;
 80007f4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80007fc:	1a5b      	subs	r3, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80007fe:	429a      	cmp	r2, r3
 8000800:	d9dd      	bls.n	80007be <chSchGoSleepTimeoutS+0x8e>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8000802:	1ad0      	subs	r0, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8000804:	2801      	cmp	r0, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8000806:	bf98      	it	ls
 8000808:	1c9a      	addls	r2, r3, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 800080a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return systime + (systime_t)interval;
 800080e:	440a      	add	r2, r1
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
 8000812:	e7d4      	b.n	80007be <chSchGoSleepTimeoutS+0x8e>
      ch.vtlist.lasttime = now;
 8000814:	62a3      	str	r3, [r4, #40]	; 0x28
 8000816:	18c8      	adds	r0, r1, r3
      ch.vtlist.next = vtp;
 8000818:	ae01      	add	r6, sp, #4
  STM32_ST_TIM->SR     = 0;
 800081a:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800081c:	2302      	movs	r3, #2
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800081e:	e9cd 5501 	strd	r5, r5, [sp, #4]
      vtp->delta = delay;
 8000822:	9103      	str	r1, [sp, #12]
      ch.vtlist.prev = vtp;
 8000824:	e9c4 6607 	strd	r6, r6, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8000828:	f8cc 0034 	str.w	r0, [ip, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800082c:	f8cc 2010 	str.w	r2, [ip, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8000830:	f8cc 300c 	str.w	r3, [ip, #12]
 8000834:	e7ae      	b.n	8000794 <chSchGoSleepTimeoutS+0x64>
  STM32_ST_TIM->DIER = 0U;
 8000836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	e7bf      	b.n	80007be <chSchGoSleepTimeoutS+0x8e>
 800083e:	bf00      	nop
 8000840:	2000087c 	.word	0x2000087c
 8000844:	080005e1 	.word	0x080005e1
	...

08000850 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8000850:	b161      	cbz	r1, 800086c <chThdEnqueueTimeoutS+0x1c>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <chThdEnqueueTimeoutS+0x24>)
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8000854:	b410      	push	{r4}
 8000856:	4602      	mov	r2, r0
  tp->queue.prev             = tqp->prev;
 8000858:	6844      	ldr	r4, [r0, #4]
  queue_insert(currp, tqp);
 800085a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800085c:	2004      	movs	r0, #4
 800085e:	e9c3 2400 	strd	r2, r4, [r3]
  tp->queue.prev->queue.next = tp;
 8000862:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8000864:	6053      	str	r3, [r2, #4]
}
 8000866:	bc10      	pop	{r4}
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8000868:	f7ff bf62 	b.w	8000730 <chSchGoSleepTimeoutS>
}
 800086c:	f04f 30ff 	mov.w	r0, #4294967295
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2000087c 	.word	0x2000087c
	...

08000880 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	4604      	mov	r4, r0
 8000884:	460f      	mov	r7, r1
 8000886:	4616      	mov	r6, r2
 8000888:	2320      	movs	r3, #32
 800088a:	f383 8811 	msr	BASEPRI, r3
 800088e:	e003      	b.n	8000898 <oqPutTimeout+0x18>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8000890:	f7ff ffde 	bl	8000850 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 8000894:	2800      	cmp	r0, #0
 8000896:	db18      	blt.n	80008ca <oqPutTimeout+0x4a>
  while (oqIsFullI(oqp)) {
 8000898:	68a5      	ldr	r5, [r4, #8]
 800089a:	4631      	mov	r1, r6
 800089c:	4620      	mov	r0, r4
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d0f6      	beq.n	8000890 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80008a2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80008a4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80008a6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80008a8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80008aa:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80008ac:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80008ae:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80008b0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80008b4:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 80008b6:	bf24      	itt	cs
 80008b8:	68e3      	ldrcs	r3, [r4, #12]
 80008ba:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80008bc:	69e3      	ldr	r3, [r4, #28]
 80008be:	b103      	cbz	r3, 80008c2 <oqPutTimeout+0x42>
    oqp->q_notify(oqp);
 80008c0:	4798      	blx	r3
 80008c2:	2000      	movs	r0, #0
 80008c4:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 80008c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008ca:	f385 8811 	msr	BASEPRI, r5
 80008ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008d0 <_putt>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80008d0:	3030      	adds	r0, #48	; 0x30
 80008d2:	f7ff bfd5 	b.w	8000880 <oqPutTimeout>
 80008d6:	bf00      	nop
	...

080008e0 <_put>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80008e0:	3030      	adds	r0, #48	; 0x30
 80008e2:	f04f 32ff 	mov.w	r2, #4294967295
 80008e6:	f7ff bfcb 	b.w	8000880 <oqPutTimeout>
 80008ea:	bf00      	nop
 80008ec:	0000      	movs	r0, r0
	...

080008f0 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	2320      	movs	r3, #32
 80008f4:	4604      	mov	r4, r0
 80008f6:	460e      	mov	r6, r1
 80008f8:	f383 8811 	msr	BASEPRI, r3
 80008fc:	e003      	b.n	8000906 <iqGetTimeout+0x16>
 80008fe:	f7ff ffa7 	bl	8000850 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8000902:	2800      	cmp	r0, #0
 8000904:	db1a      	blt.n	800093c <iqGetTimeout+0x4c>
  while (iqIsEmptyI(iqp)) {
 8000906:	68a5      	ldr	r5, [r4, #8]
 8000908:	4631      	mov	r1, r6
 800090a:	4620      	mov	r0, r4
 800090c:	2d00      	cmp	r5, #0
 800090e:	d0f6      	beq.n	80008fe <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8000910:	69a1      	ldr	r1, [r4, #24]
  iqp->q_counter--;
 8000912:	68a3      	ldr	r3, [r4, #8]
  if (iqp->q_rdptr >= iqp->q_top) {
 8000914:	6920      	ldr	r0, [r4, #16]
  b = *iqp->q_rdptr++;
 8000916:	1c4a      	adds	r2, r1, #1
  iqp->q_counter--;
 8000918:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800091a:	4282      	cmp	r2, r0
  iqp->q_counter--;
 800091c:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800091e:	61a2      	str	r2, [r4, #24]
    iqp->q_rdptr = iqp->q_buffer;
 8000920:	bf28      	it	cs
 8000922:	68e3      	ldrcs	r3, [r4, #12]
  b = *iqp->q_rdptr++;
 8000924:	780d      	ldrb	r5, [r1, #0]
    iqp->q_rdptr = iqp->q_buffer;
 8000926:	bf28      	it	cs
 8000928:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800092a:	69e3      	ldr	r3, [r4, #28]
 800092c:	b10b      	cbz	r3, 8000932 <iqGetTimeout+0x42>
    iqp->q_notify(iqp);
 800092e:	4620      	mov	r0, r4
 8000930:	4798      	blx	r3
 8000932:	2300      	movs	r3, #0
 8000934:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8000938:	4628      	mov	r0, r5
}
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f385 8811 	msr	BASEPRI, r5
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	bf00      	nop
	...

08000950 <_gett>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8000950:	300c      	adds	r0, #12
 8000952:	f7ff bfcd 	b.w	80008f0 <iqGetTimeout>
 8000956:	bf00      	nop
	...

08000960 <_get>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8000960:	300c      	adds	r0, #12
 8000962:	f04f 31ff 	mov.w	r1, #4294967295
 8000966:	f7ff bfc3 	b.w	80008f0 <iqGetTimeout>
 800096a:	bf00      	nop
 800096c:	0000      	movs	r0, r0
	...

08000970 <myPrintf>:
  palSetPadMode(GPIOC,6U,PAL_MODE_ALTERNATE(8));
  palSetPadMode(GPIOC,7U,PAL_MODE_ALTERNATE(8));
}


int myPrintf(const char *fmt, ...) {
 8000970:	b40f      	push	{r0, r1, r2, r3}
 8000972:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000976:	b087      	sub	sp, #28
 8000978:	ab10      	add	r3, sp, #64	; 0x40
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 800097a:	2700      	movs	r7, #0
 800097c:	f853 4b04 	ldr.w	r4, [r3], #4
 8000980:	4ebb      	ldr	r6, [pc, #748]	; (8000c70 <myPrintf+0x300>)
 8000982:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000986:	e005      	b.n	8000994 <myPrintf+0x24>
    if (c == 0) {
      return n;
    }
    
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8000988:	6833      	ldr	r3, [r6, #0]
 800098a:	48b9      	ldr	r0, [pc, #740]	; (8000c70 <myPrintf+0x300>)
 800098c:	68db      	ldr	r3, [r3, #12]
      n++;
 800098e:	3701      	adds	r7, #1
    c = *fmt++;
 8000990:	462c      	mov	r4, r5
      streamPut(chp, (uint8_t)c);
 8000992:	4798      	blx	r3
    c = *fmt++;
 8000994:	7821      	ldrb	r1, [r4, #0]
 8000996:	1c65      	adds	r5, r4, #1
    if (c == 0) {
 8000998:	2900      	cmp	r1, #0
 800099a:	d073      	beq.n	8000a84 <myPrintf+0x114>
    if (c != '%') {
 800099c:	2925      	cmp	r1, #37	; 0x25
 800099e:	d1f3      	bne.n	8000988 <myPrintf+0x18>
    p = tmpbuf;
    s = tmpbuf;

    /* Alignment mode.*/
    left_align = false;
    if (*fmt == '-') {
 80009a0:	7863      	ldrb	r3, [r4, #1]
 80009a2:	2b2d      	cmp	r3, #45	; 0x2d
 80009a4:	bf03      	ittte	eq
 80009a6:	78a3      	ldrbeq	r3, [r4, #2]
      fmt++;
 80009a8:	1ca5      	addeq	r5, r4, #2
      left_align = true;
 80009aa:	2001      	moveq	r0, #1
    left_align = false;
 80009ac:	2000      	movne	r0, #0
    }

    /* Sign mode.*/
    do_sign = false;
    if (*fmt == '+') {
 80009ae:	2b2b      	cmp	r3, #43	; 0x2b
 80009b0:	bf03      	ittte	eq
 80009b2:	786b      	ldrbeq	r3, [r5, #1]
      fmt++;
      do_sign = true;
 80009b4:	f04f 0c01 	moveq.w	ip, #1
      fmt++;
 80009b8:	4465      	addeq	r5, ip
    do_sign = false;
 80009ba:	f04f 0c00 	movne.w	ip, #0
    }

    /* Filler mode.*/
    filler = ' ';
    if (*fmt == '0') {
 80009be:	2b30      	cmp	r3, #48	; 0x30
 80009c0:	bf03      	ittte	eq
 80009c2:	786b      	ldrbeq	r3, [r5, #1]
      fmt++;
      filler = '0';
 80009c4:	f04f 0830 	moveq.w	r8, #48	; 0x30
      fmt++;
 80009c8:	3501      	addeq	r5, #1
    filler = ' ';
 80009ca:	f04f 0820 	movne.w	r8, #32
    }
    
    /* Width modifier.*/
    if ( *fmt == '*') {
 80009ce:	2b2a      	cmp	r3, #42	; 0x2a
 80009d0:	d141      	bne.n	8000a56 <myPrintf+0xe6>
      width = va_arg(ap, int);
 80009d2:	9b01      	ldr	r3, [sp, #4]
 80009d4:	f103 0e04 	add.w	lr, r3, #4
 80009d8:	681a      	ldr	r2, [r3, #0]
      ++fmt;
      c = *fmt++;
 80009da:	786b      	ldrb	r3, [r5, #1]
 80009dc:	1cac      	adds	r4, r5, #2
      }
    }
    
    /* Precision modifier.*/
    precision = 0;
    if (c == '.') {
 80009de:	2b2e      	cmp	r3, #46	; 0x2e
 80009e0:	f104 0501 	add.w	r5, r4, #1
 80009e4:	d07f      	beq.n	8000ae6 <myPrintf+0x176>
    precision = 0;
 80009e6:	2100      	movs	r1, #0
        }
      }
    }
    
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 80009e8:	f003 09df 	and.w	r9, r3, #223	; 0xdf
 80009ec:	f1b9 0f4c 	cmp.w	r9, #76	; 0x4c
 80009f0:	d04e      	beq.n	8000a90 <myPrintf+0x120>
      if (c == 0) {
        return n;
      }
    }
    else {
      is_long = (c >= 'A') && (c <= 'Z');
 80009f2:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
    }

    /* Command decoding.*/
    switch (c) {
 80009f6:	2b63      	cmp	r3, #99	; 0x63
      is_long = (c >= 'A') && (c <= 'Z');
 80009f8:	b2ed      	uxtb	r5, r5
    switch (c) {
 80009fa:	f000 80dc 	beq.w	8000bb6 <myPrintf+0x246>
 80009fe:	d95c      	bls.n	8000aba <myPrintf+0x14a>
 8000a00:	2b70      	cmp	r3, #112	; 0x70
 8000a02:	f000 811b 	beq.w	8000c3c <myPrintf+0x2cc>
 8000a06:	f240 80a0 	bls.w	8000b4a <myPrintf+0x1da>
 8000a0a:	2b75      	cmp	r3, #117	; 0x75
 8000a0c:	f000 812d 	beq.w	8000c6a <myPrintf+0x2fa>
 8000a10:	2b78      	cmp	r3, #120	; 0x78
 8000a12:	f000 8113 	beq.w	8000c3c <myPrintf+0x2cc>
 8000a16:	2b73      	cmp	r3, #115	; 0x73
 8000a18:	d15c      	bne.n	8000ad4 <myPrintf+0x164>
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0) {
 8000a1a:	f8de 5000 	ldr.w	r5, [lr]
 8000a1e:	f10e 0304 	add.w	r3, lr, #4
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	f000 8191 	beq.w	8000d4c <myPrintf+0x3dc>
 8000a2a:	782b      	ldrb	r3, [r5, #0]
        s = "(null)";
      }
      if (precision == 0) {
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	f040 8174 	bne.w	8000d1a <myPrintf+0x3aa>
        precision = 32767;
      }
      for (p = s; *p && (--precision >= 0); p++)
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	f000 819a 	beq.w	8000d6c <myPrintf+0x3fc>
 8000a38:	46a9      	mov	r9, r5
 8000a3a:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000a3e:	464d      	mov	r5, r9
 8000a40:	e001      	b.n	8000a46 <myPrintf+0xd6>
 8000a42:	1c4b      	adds	r3, r1, #1
 8000a44:	d004      	beq.n	8000a50 <myPrintf+0xe0>
 8000a46:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000a4a:	3901      	subs	r1, #1
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1f8      	bne.n	8000a42 <myPrintf+0xd2>
      filler = ' ';
 8000a50:	f04f 0820 	mov.w	r8, #32
 8000a54:	e0bc      	b.n	8000bd0 <myPrintf+0x260>
        c = *fmt++;
 8000a56:	1c6c      	adds	r4, r5, #1
        if (c == 0) {
 8000a58:	b1a3      	cbz	r3, 8000a84 <myPrintf+0x114>
        if (c >= '0' && c <= '9') {
 8000a5a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8000a5e:	b2c9      	uxtb	r1, r1
 8000a60:	2909      	cmp	r1, #9
      width = 0;
 8000a62:	bf98      	it	ls
 8000a64:	2200      	movls	r2, #0
        if (c >= '0' && c <= '9') {
 8000a66:	d902      	bls.n	8000a6e <myPrintf+0xfe>
 8000a68:	e15d      	b.n	8000d26 <myPrintf+0x3b6>
 8000a6a:	2909      	cmp	r1, #9
 8000a6c:	d848      	bhi.n	8000b00 <myPrintf+0x190>
        c = *fmt++;
 8000a6e:	f814 3b01 	ldrb.w	r3, [r4], #1
          width = width * 10 + c;
 8000a72:	eb02 0282 	add.w	r2, r2, r2, lsl #2
        if (c >= '0' && c <= '9') {
 8000a76:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
          width = width * 10 + c;
 8000a7a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        if (c >= '0' && c <= '9') {
 8000a7e:	b2e9      	uxtb	r1, r5
        if (c == 0) {
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f2      	bne.n	8000a6a <myPrintf+0xfa>
  va_start(ap, fmt);
  formatted_bytes = chvprintf((BaseSequentialStream*)&SD6, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8000a84:	4638      	mov	r0, r7
 8000a86:	b007      	add	sp, #28
 8000a88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8c:	b004      	add	sp, #16
 8000a8e:	4770      	bx	lr
      c = *fmt++;
 8000a90:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d0f6      	beq.n	8000a84 <myPrintf+0x114>
    switch (c) {
 8000a96:	2b63      	cmp	r3, #99	; 0x63
 8000a98:	f000 808c 	beq.w	8000bb4 <myPrintf+0x244>
 8000a9c:	d948      	bls.n	8000b30 <myPrintf+0x1c0>
 8000a9e:	2b70      	cmp	r3, #112	; 0x70
 8000aa0:	f000 80cb 	beq.w	8000c3a <myPrintf+0x2ca>
 8000aa4:	d97e      	bls.n	8000ba4 <myPrintf+0x234>
 8000aa6:	2b75      	cmp	r3, #117	; 0x75
 8000aa8:	f000 80de 	beq.w	8000c68 <myPrintf+0x2f8>
 8000aac:	2b78      	cmp	r3, #120	; 0x78
 8000aae:	f000 80c4 	beq.w	8000c3a <myPrintf+0x2ca>
 8000ab2:	2b73      	cmp	r3, #115	; 0x73
 8000ab4:	d147      	bne.n	8000b46 <myPrintf+0x1d6>
      c = *fmt++;
 8000ab6:	462c      	mov	r4, r5
 8000ab8:	e7af      	b.n	8000a1a <myPrintf+0xaa>
    switch (c) {
 8000aba:	2b4f      	cmp	r3, #79	; 0x4f
 8000abc:	d04b      	beq.n	8000b56 <myPrintf+0x1e6>
 8000abe:	f240 80e6 	bls.w	8000c8e <myPrintf+0x31e>
 8000ac2:	2b55      	cmp	r3, #85	; 0x55
 8000ac4:	f000 80d1 	beq.w	8000c6a <myPrintf+0x2fa>
 8000ac8:	2b58      	cmp	r3, #88	; 0x58
 8000aca:	f000 80b7 	beq.w	8000c3c <myPrintf+0x2cc>
 8000ace:	2b50      	cmp	r3, #80	; 0x50
 8000ad0:	f000 80b4 	beq.w	8000c3c <myPrintf+0x2cc>
        l = va_arg(ap, unsigned int);
      }
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8000ad4:	f10d 0918 	add.w	r9, sp, #24
 8000ad8:	f8cd e004 	str.w	lr, [sp, #4]
 8000adc:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8000ae0:	f10d 050d 	add.w	r5, sp, #13
 8000ae4:	e074      	b.n	8000bd0 <myPrintf+0x260>
      c = *fmt++;
 8000ae6:	7823      	ldrb	r3, [r4, #0]
      if (c == 0) {
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0cb      	beq.n	8000a84 <myPrintf+0x114>
      if (c == '*') {
 8000aec:	2b2a      	cmp	r3, #42	; 0x2a
 8000aee:	d10a      	bne.n	8000b06 <myPrintf+0x196>
        precision = va_arg(ap, int);
 8000af0:	f8de 1000 	ldr.w	r1, [lr]
        c = *fmt++;
 8000af4:	7863      	ldrb	r3, [r4, #1]
 8000af6:	1ce5      	adds	r5, r4, #3
        precision = va_arg(ap, int);
 8000af8:	f10e 0e04 	add.w	lr, lr, #4
        c = *fmt++;
 8000afc:	3402      	adds	r4, #2
 8000afe:	e773      	b.n	80009e8 <myPrintf+0x78>
        if (c >= '0' && c <= '9') {
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e76b      	b.n	80009de <myPrintf+0x6e>
    precision = 0;
 8000b06:	2100      	movs	r1, #0
 8000b08:	e006      	b.n	8000b18 <myPrintf+0x1a8>
          c = *fmt++;
 8000b0a:	f819 3c01 	ldrb.w	r3, [r9, #-1]
          precision = precision * 10 + c;
 8000b0e:	eb04 014a 	add.w	r1, r4, sl, lsl #1
 8000b12:	464d      	mov	r5, r9
          if (c == 0) {
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0b5      	beq.n	8000a84 <myPrintf+0x114>
        while (c >= '0' && c <= '9') {
 8000b18:	f1a3 0430 	sub.w	r4, r3, #48	; 0x30
 8000b1c:	b2e4      	uxtb	r4, r4
 8000b1e:	2c09      	cmp	r4, #9
 8000b20:	f105 0901 	add.w	r9, r5, #1
          precision = precision * 10 + c;
 8000b24:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
        while (c >= '0' && c <= '9') {
 8000b28:	d9ef      	bls.n	8000b0a <myPrintf+0x19a>
 8000b2a:	462c      	mov	r4, r5
 8000b2c:	464d      	mov	r5, r9
 8000b2e:	e75b      	b.n	80009e8 <myPrintf+0x78>
    switch (c) {
 8000b30:	2b4f      	cmp	r3, #79	; 0x4f
 8000b32:	d03d      	beq.n	8000bb0 <myPrintf+0x240>
 8000b34:	f240 80e5 	bls.w	8000d02 <myPrintf+0x392>
 8000b38:	2b55      	cmp	r3, #85	; 0x55
 8000b3a:	f000 8095 	beq.w	8000c68 <myPrintf+0x2f8>
 8000b3e:	2b58      	cmp	r3, #88	; 0x58
 8000b40:	d07b      	beq.n	8000c3a <myPrintf+0x2ca>
 8000b42:	2b50      	cmp	r3, #80	; 0x50
 8000b44:	d079      	beq.n	8000c3a <myPrintf+0x2ca>
      c = *fmt++;
 8000b46:	462c      	mov	r4, r5
 8000b48:	e7c4      	b.n	8000ad4 <myPrintf+0x164>
    switch (c) {
 8000b4a:	2b69      	cmp	r3, #105	; 0x69
 8000b4c:	f000 80a4 	beq.w	8000c98 <myPrintf+0x328>
 8000b50:	2b6f      	cmp	r3, #111	; 0x6f
 8000b52:	f040 8101 	bne.w	8000d58 <myPrintf+0x3e8>
      c = 8;
 8000b56:	f04f 0908 	mov.w	r9, #8
 8000b5a:	4671      	mov	r1, lr
  q = p + MAX_FILLER;
 8000b5c:	f10d 0517 	add.w	r5, sp, #23
 8000b60:	f851 3b04 	ldr.w	r3, [r1], #4
 8000b64:	9101      	str	r1, [sp, #4]
 8000b66:	4629      	mov	r1, r5
    i = (int)(l % radix);
 8000b68:	fbb3 fef9 	udiv	lr, r3, r9
 8000b6c:	fb09 331e 	mls	r3, r9, lr, r3
    i += '0';
 8000b70:	f103 0c30 	add.w	ip, r3, #48	; 0x30
    if (i > '9') {
 8000b74:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
      i += 'A' - '0' - 10;
 8000b78:	bfc8      	it	gt
 8000b7a:	f103 0c37 	addgt.w	ip, r3, #55	; 0x37
    l /= radix;
 8000b7e:	4673      	mov	r3, lr
    *--q = i;
 8000b80:	f801 cd01 	strb.w	ip, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d1ef      	bne.n	8000b68 <myPrintf+0x1f8>
  i = (int)(p + MAX_FILLER - q);
 8000b88:	1a6d      	subs	r5, r5, r1
 8000b8a:	f10d 090c 	add.w	r9, sp, #12
 8000b8e:	eb01 0e05 	add.w	lr, r1, r5
 8000b92:	464b      	mov	r3, r9
    *p++ = *q++;
 8000b94:	f811 cb01 	ldrb.w	ip, [r1], #1
 8000b98:	f803 cb01 	strb.w	ip, [r3], #1
  while (--i);
 8000b9c:	4571      	cmp	r1, lr
 8000b9e:	d1f9      	bne.n	8000b94 <myPrintf+0x224>
 8000ba0:	444d      	add	r5, r9
 8000ba2:	e015      	b.n	8000bd0 <myPrintf+0x260>
    switch (c) {
 8000ba4:	2b69      	cmp	r3, #105	; 0x69
 8000ba6:	f000 80b1 	beq.w	8000d0c <myPrintf+0x39c>
 8000baa:	2b6f      	cmp	r3, #111	; 0x6f
 8000bac:	f040 80d8 	bne.w	8000d60 <myPrintf+0x3f0>
      c = *fmt++;
 8000bb0:	462c      	mov	r4, r5
 8000bb2:	e7d0      	b.n	8000b56 <myPrintf+0x1e6>
 8000bb4:	462c      	mov	r4, r5
      *p++ = va_arg(ap, int);
 8000bb6:	f10d 0918 	add.w	r9, sp, #24
 8000bba:	f8de 3000 	ldr.w	r3, [lr]
 8000bbe:	f809 3d0c 	strb.w	r3, [r9, #-12]!
 8000bc2:	f10e 0304 	add.w	r3, lr, #4
 8000bc6:	9301      	str	r3, [sp, #4]
      filler = ' ';
 8000bc8:	f04f 0820 	mov.w	r8, #32
      *p++ = va_arg(ap, int);
 8000bcc:	f10d 050d 	add.w	r5, sp, #13
      break;
    }
    i = (int)(p - s);
 8000bd0:	eba5 0509 	sub.w	r5, r5, r9
 8000bd4:	f105 3aff 	add.w	sl, r5, #4294967295
    if ((width -= i) < 0) {
 8000bd8:	1b55      	subs	r5, r2, r5
 8000bda:	d437      	bmi.n	8000c4c <myPrintf+0x2dc>
      width = 0;
    }
    if (left_align == false) {
 8000bdc:	bb88      	cbnz	r0, 8000c42 <myPrintf+0x2d2>
      width = -width;
 8000bde:	f1c5 0b00 	rsb	fp, r5, #0
    }
    if (width < 0) {
 8000be2:	b37d      	cbz	r5, 8000c44 <myPrintf+0x2d4>
      if (*s == '-' && filler == '0') {
 8000be4:	f899 1000 	ldrb.w	r1, [r9]
 8000be8:	292d      	cmp	r1, #45	; 0x2d
 8000bea:	d043      	beq.n	8000c74 <myPrintf+0x304>
        streamPut(chp, (uint8_t)*s++);
        n++;
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8000bec:	6833      	ldr	r3, [r6, #0]
 8000bee:	4641      	mov	r1, r8
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8000bf6:	f11b 0b01 	adds.w	fp, fp, #1
 8000bfa:	d1f7      	bne.n	8000bec <myPrintf+0x27c>
    }
    while (--i >= 0) {
 8000bfc:	f1ba 0f00 	cmp.w	sl, #0
 8000c00:	442f      	add	r7, r5
 8000c02:	f6ff aec7 	blt.w	8000994 <myPrintf+0x24>
      width = -width;
 8000c06:	4655      	mov	r5, sl
      streamPut(chp, (uint8_t)*s++);
 8000c08:	6833      	ldr	r3, [r6, #0]
 8000c0a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8000c0e:	68db      	ldr	r3, [r3, #12]
    while (--i >= 0) {
 8000c10:	3d01      	subs	r5, #1
      streamPut(chp, (uint8_t)*s++);
 8000c12:	4630      	mov	r0, r6
 8000c14:	4798      	blx	r3
    while (--i >= 0) {
 8000c16:	1c6b      	adds	r3, r5, #1
 8000c18:	d1f6      	bne.n	8000c08 <myPrintf+0x298>
 8000c1a:	3701      	adds	r7, #1
 8000c1c:	4457      	add	r7, sl
      n++;
    }

    while (width) {
 8000c1e:	f1bb 0f00 	cmp.w	fp, #0
 8000c22:	f43f aeb7 	beq.w	8000994 <myPrintf+0x24>
 8000c26:	465d      	mov	r5, fp
      streamPut(chp, (uint8_t)filler);
 8000c28:	6833      	ldr	r3, [r6, #0]
 8000c2a:	4641      	mov	r1, r8
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	4630      	mov	r0, r6
 8000c30:	4798      	blx	r3
    while (width) {
 8000c32:	3d01      	subs	r5, #1
 8000c34:	d1f8      	bne.n	8000c28 <myPrintf+0x2b8>
 8000c36:	445f      	add	r7, fp
 8000c38:	e6ac      	b.n	8000994 <myPrintf+0x24>
      c = *fmt++;
 8000c3a:	462c      	mov	r4, r5
      c = 16;
 8000c3c:	f04f 0910 	mov.w	r9, #16
 8000c40:	e78b      	b.n	8000b5a <myPrintf+0x1ea>
    if (left_align == false) {
 8000c42:	46ab      	mov	fp, r5
    while (--i >= 0) {
 8000c44:	f1ba 0f00 	cmp.w	sl, #0
 8000c48:	dadd      	bge.n	8000c06 <myPrintf+0x296>
 8000c4a:	e7e8      	b.n	8000c1e <myPrintf+0x2ae>
    if (left_align == false) {
 8000c4c:	b928      	cbnz	r0, 8000c5a <myPrintf+0x2ea>
    while (--i >= 0) {
 8000c4e:	f1ba 0f00 	cmp.w	sl, #0
 8000c52:	f6ff ae9f 	blt.w	8000994 <myPrintf+0x24>
      width = -width;
 8000c56:	4683      	mov	fp, r0
 8000c58:	e7d5      	b.n	8000c06 <myPrintf+0x296>
    while (--i >= 0) {
 8000c5a:	f1ba 0f00 	cmp.w	sl, #0
 8000c5e:	f6ff ae99 	blt.w	8000994 <myPrintf+0x24>
      width = 0;
 8000c62:	f04f 0b00 	mov.w	fp, #0
 8000c66:	e7ce      	b.n	8000c06 <myPrintf+0x296>
      c = *fmt++;
 8000c68:	462c      	mov	r4, r5
      c = 10;
 8000c6a:	f04f 090a 	mov.w	r9, #10
 8000c6e:	e774      	b.n	8000b5a <myPrintf+0x1ea>
 8000c70:	20000800 	.word	0x20000800
      if (*s == '-' && filler == '0') {
 8000c74:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 8000c78:	d1b8      	bne.n	8000bec <myPrintf+0x27c>
        streamPut(chp, (uint8_t)*s++);
 8000c7a:	6833      	ldr	r3, [r6, #0]
 8000c7c:	483d      	ldr	r0, [pc, #244]	; (8000d74 <myPrintf+0x404>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	4798      	blx	r3
 8000c82:	3701      	adds	r7, #1
 8000c84:	f109 0901 	add.w	r9, r9, #1
 8000c88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8000c8c:	e7ae      	b.n	8000bec <myPrintf+0x27c>
    switch (c) {
 8000c8e:	2b44      	cmp	r3, #68	; 0x44
 8000c90:	d002      	beq.n	8000c98 <myPrintf+0x328>
 8000c92:	2b49      	cmp	r3, #73	; 0x49
 8000c94:	f47f af1e 	bne.w	8000ad4 <myPrintf+0x164>
 8000c98:	4673      	mov	r3, lr
      if (is_long) {
 8000c9a:	2d19      	cmp	r5, #25
 8000c9c:	f853 ab04 	ldr.w	sl, [r3], #4
 8000ca0:	9301      	str	r3, [sp, #4]
 8000ca2:	d936      	bls.n	8000d12 <myPrintf+0x3a2>
      if (l < 0) {
 8000ca4:	f1ba 0f00 	cmp.w	sl, #0
 8000ca8:	db41      	blt.n	8000d2e <myPrintf+0x3be>
        if (do_sign) {
 8000caa:	f1bc 0f00 	cmp.w	ip, #0
 8000cae:	d049      	beq.n	8000d44 <myPrintf+0x3d4>
          *p++ = '+';
 8000cb0:	232b      	movs	r3, #43	; 0x2b
 8000cb2:	f88d 300c 	strb.w	r3, [sp, #12]
 8000cb6:	f10d 050d 	add.w	r5, sp, #13
 8000cba:	f10d 090c 	add.w	r9, sp, #12
  q = p + MAX_FILLER;
 8000cbe:	f105 0c0b 	add.w	ip, r5, #11
 8000cc2:	4696      	mov	lr, r2
 8000cc4:	4661      	mov	r1, ip
 8000cc6:	4652      	mov	r2, sl
    i = (int)(l % radix);
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <myPrintf+0x408>)
 8000cca:	fba3 a302 	umull	sl, r3, r3, r2
 8000cce:	08db      	lsrs	r3, r3, #3
 8000cd0:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8000cd4:	469a      	mov	sl, r3
 8000cd6:	eba2 034b 	sub.w	r3, r2, fp, lsl #1
    i += '0';
 8000cda:	3330      	adds	r3, #48	; 0x30
  } while ((ll /= radix) != 0);
 8000cdc:	4652      	mov	r2, sl
    *--q = i;
 8000cde:	f801 3d01 	strb.w	r3, [r1, #-1]!
  } while ((ll /= radix) != 0);
 8000ce2:	2a00      	cmp	r2, #0
 8000ce4:	d1f0      	bne.n	8000cc8 <myPrintf+0x358>
  i = (int)(p + MAX_FILLER - q);
 8000ce6:	ebac 0a01 	sub.w	sl, ip, r1
 8000cea:	4672      	mov	r2, lr
 8000cec:	1e6b      	subs	r3, r5, #1
 8000cee:	eb01 0e0a 	add.w	lr, r1, sl
    *p++ = *q++;
 8000cf2:	f811 cb01 	ldrb.w	ip, [r1], #1
 8000cf6:	f803 cf01 	strb.w	ip, [r3, #1]!
  while (--i);
 8000cfa:	4571      	cmp	r1, lr
 8000cfc:	d1f9      	bne.n	8000cf2 <myPrintf+0x382>
 8000cfe:	4455      	add	r5, sl
 8000d00:	e766      	b.n	8000bd0 <myPrintf+0x260>
    switch (c) {
 8000d02:	2b44      	cmp	r3, #68	; 0x44
 8000d04:	d002      	beq.n	8000d0c <myPrintf+0x39c>
 8000d06:	2b49      	cmp	r3, #73	; 0x49
 8000d08:	f47f af1d 	bne.w	8000b46 <myPrintf+0x1d6>
      c = *fmt++;
 8000d0c:	462c      	mov	r4, r5
 8000d0e:	f10e 0304 	add.w	r3, lr, #4
        l = va_arg(ap, long);
 8000d12:	f8de a000 	ldr.w	sl, [lr]
 8000d16:	9301      	str	r3, [sp, #4]
 8000d18:	e7c4      	b.n	8000ca4 <myPrintf+0x334>
      for (p = s; *p && (--precision >= 0); p++)
 8000d1a:	b33b      	cbz	r3, 8000d6c <myPrintf+0x3fc>
 8000d1c:	3901      	subs	r1, #1
 8000d1e:	46a9      	mov	r9, r5
 8000d20:	f57f ae8d 	bpl.w	8000a3e <myPrintf+0xce>
 8000d24:	e694      	b.n	8000a50 <myPrintf+0xe0>
        if (c >= '0' && c <= '9') {
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
      width = 0;
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	e657      	b.n	80009de <myPrintf+0x6e>
        *p++ = '-';
 8000d2e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8000d32:	f88d 300c 	strb.w	r3, [sp, #12]
        l = -l;
 8000d36:	f1ca 0a00 	rsb	sl, sl, #0
        *p++ = '-';
 8000d3a:	f10d 050d 	add.w	r5, sp, #13
 8000d3e:	f10d 090c 	add.w	r9, sp, #12
 8000d42:	e7bc      	b.n	8000cbe <myPrintf+0x34e>
    p = tmpbuf;
 8000d44:	f10d 090c 	add.w	r9, sp, #12
 8000d48:	464d      	mov	r5, r9
 8000d4a:	e7b8      	b.n	8000cbe <myPrintf+0x34e>
      if (precision == 0) {
 8000d4c:	b961      	cbnz	r1, 8000d68 <myPrintf+0x3f8>
 8000d4e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 8000d7c <myPrintf+0x40c>
      for (p = s; *p && (--precision >= 0); p++)
 8000d52:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8000d56:	e672      	b.n	8000a3e <myPrintf+0xce>
    switch (c) {
 8000d58:	2b64      	cmp	r3, #100	; 0x64
 8000d5a:	f47f aebb 	bne.w	8000ad4 <myPrintf+0x164>
 8000d5e:	e79b      	b.n	8000c98 <myPrintf+0x328>
 8000d60:	2b64      	cmp	r3, #100	; 0x64
 8000d62:	d0d3      	beq.n	8000d0c <myPrintf+0x39c>
      c = *fmt++;
 8000d64:	462c      	mov	r4, r5
 8000d66:	e6b5      	b.n	8000ad4 <myPrintf+0x164>
      if (precision == 0) {
 8000d68:	4d04      	ldr	r5, [pc, #16]	; (8000d7c <myPrintf+0x40c>)
 8000d6a:	e7d7      	b.n	8000d1c <myPrintf+0x3ac>
      for (p = s; *p && (--precision >= 0); p++)
 8000d6c:	46a9      	mov	r9, r5
      filler = ' ';
 8000d6e:	f04f 0820 	mov.w	r8, #32
 8000d72:	e72d      	b.n	8000bd0 <myPrintf+0x260>
 8000d74:	20000800 	.word	0x20000800
 8000d78:	cccccccd 	.word	0xcccccccd
 8000d7c:	08001c24 	.word	0x08001c24

08000d80 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8000d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d84:	b085      	sub	sp, #20
 8000d86:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = oqp->q_notify;
 8000d8a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000d8e:	f04f 0a20 	mov.w	sl, #32
 8000d92:	f38a 8811 	msr	BASEPRI, sl

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 8000d96:	b33a      	cbz	r2, 8000de8 <oqWriteTimeout+0x68>
 8000d98:	4604      	mov	r4, r0
 8000d9a:	460f      	mov	r7, r1
 8000d9c:	4616      	mov	r6, r2
 8000d9e:	f04f 0b00 	mov.w	fp, #0
  if (n > oqGetEmptyI(oqp)) {
 8000da2:	68a2      	ldr	r2, [r4, #8]
 8000da4:	4296      	cmp	r6, r2
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000da6:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
    n = oqGetEmptyI(oqp);
 8000daa:	bf8c      	ite	hi
 8000dac:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8000dae:	4635      	movls	r5, r6
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8000db0:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8000db4:	45a8      	cmp	r8, r5
 8000db6:	d840      	bhi.n	8000e3a <oqWriteTimeout+0xba>
  else if (n > s1) {
 8000db8:	d32b      	bcc.n	8000e12 <oqWriteTimeout+0x92>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000dba:	462a      	mov	r2, r5
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	f7ff fa95 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8000dc2:	68e2      	ldr	r2, [r4, #12]
 8000dc4:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8000dc6:	68a2      	ldr	r2, [r4, #8]
 8000dc8:	1b52      	subs	r2, r2, r5
 8000dca:	60a2      	str	r2, [r4, #8]
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8000dcc:	b19d      	cbz	r5, 8000df6 <oqWriteTimeout+0x76>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8000dce:	f1b9 0f00 	cmp.w	r9, #0
 8000dd2:	d001      	beq.n	8000dd8 <oqWriteTimeout+0x58>
        nfy(oqp);
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	47c8      	blx	r9
 8000dd8:	f38b 8811 	msr	BASEPRI, fp
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 8000ddc:	1b76      	subs	r6, r6, r5
      bp += done;
 8000dde:	442f      	add	r7, r5
 8000de0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d1dc      	bne.n	8000da2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 8000de8:	9803      	ldr	r0, [sp, #12]
 8000dea:	2300      	movs	r3, #0
 8000dec:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8000df0:	b005      	add	sp, #20
 8000df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df6:	9902      	ldr	r1, [sp, #8]
 8000df8:	4620      	mov	r0, r4
 8000dfa:	f7ff fd29 	bl	8000850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000dfe:	2800      	cmp	r0, #0
 8000e00:	d0cf      	beq.n	8000da2 <oqWriteTimeout+0x22>
 8000e02:	9b03      	ldr	r3, [sp, #12]
 8000e04:	1b98      	subs	r0, r3, r6
 8000e06:	2300      	movs	r3, #0
 8000e08:	f383 8811 	msr	BASEPRI, r3
}
 8000e0c:	b005      	add	sp, #20
 8000e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000e12:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000e16:	4642      	mov	r2, r8
 8000e18:	4639      	mov	r1, r7
    s2 = n - s1;
 8000e1a:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8000e1c:	f7ff fa66 	bl	80002ec <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8000e20:	eb07 0108 	add.w	r1, r7, r8
 8000e24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000e28:	68e0      	ldr	r0, [r4, #12]
 8000e2a:	4642      	mov	r2, r8
 8000e2c:	f7ff fa5e 	bl	80002ec <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8000e30:	68e2      	ldr	r2, [r4, #12]
 8000e32:	4643      	mov	r3, r8
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	6163      	str	r3, [r4, #20]
 8000e38:	e7c5      	b.n	8000dc6 <oqWriteTimeout+0x46>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8000e3a:	462a      	mov	r2, r5
 8000e3c:	4639      	mov	r1, r7
 8000e3e:	f7ff fa55 	bl	80002ec <memcpy>
    oqp->q_wrptr += n;
 8000e42:	6962      	ldr	r2, [r4, #20]
 8000e44:	442a      	add	r2, r5
 8000e46:	6162      	str	r2, [r4, #20]
 8000e48:	e7bd      	b.n	8000dc6 <oqWriteTimeout+0x46>
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <_writet>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8000e50:	3030      	adds	r0, #48	; 0x30
 8000e52:	f7ff bf95 	b.w	8000d80 <oqWriteTimeout>
 8000e56:	bf00      	nop
	...

08000e60 <_write>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8000e60:	3030      	adds	r0, #48	; 0x30
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	f7ff bf8b 	b.w	8000d80 <oqWriteTimeout>
 8000e6a:	bf00      	nop
 8000e6c:	0000      	movs	r0, r0
	...

08000e70 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 8000e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e74:	b085      	sub	sp, #20
 8000e76:	e9cd 3202 	strd	r3, r2, [sp, #8]
  qnotify_t nfy = iqp->q_notify;
 8000e7a:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8000e7e:	f04f 0a20 	mov.w	sl, #32
 8000e82:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000e86:	b33a      	cbz	r2, 8000ed8 <iqReadTimeout+0x68>
 8000e88:	4604      	mov	r4, r0
 8000e8a:	460f      	mov	r7, r1
 8000e8c:	4616      	mov	r6, r2
 8000e8e:	f04f 0b00 	mov.w	fp, #0
  if (n > iqGetFullI(iqp)) {
 8000e92:	68a2      	ldr	r2, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000e94:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 8000e96:	4296      	cmp	r6, r2
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000e98:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 8000e9a:	bf8c      	ite	hi
 8000e9c:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 8000e9e:	4635      	movls	r5, r6
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8000ea0:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8000ea4:	45a8      	cmp	r8, r5
 8000ea6:	d840      	bhi.n	8000f2a <iqReadTimeout+0xba>
  else if (n > s1) {
 8000ea8:	d32b      	bcc.n	8000f02 <iqReadTimeout+0x92>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000eaa:	462a      	mov	r2, r5
 8000eac:	4638      	mov	r0, r7
 8000eae:	f7ff fa1d 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8000eb2:	68e2      	ldr	r2, [r4, #12]
 8000eb4:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8000eb6:	68a2      	ldr	r2, [r4, #8]
 8000eb8:	1b52      	subs	r2, r2, r5
 8000eba:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 8000ebc:	b19d      	cbz	r5, 8000ee6 <iqReadTimeout+0x76>
      if (nfy != NULL) {
 8000ebe:	f1b9 0f00 	cmp.w	r9, #0
 8000ec2:	d001      	beq.n	8000ec8 <iqReadTimeout+0x58>
        nfy(iqp);
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	47c8      	blx	r9
 8000ec8:	f38b 8811 	msr	BASEPRI, fp
      n  -= done;
 8000ecc:	1b76      	subs	r6, r6, r5
      bp += done;
 8000ece:	442f      	add	r7, r5
 8000ed0:	f38a 8811 	msr	BASEPRI, sl
  while (n > 0U) {
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	d1dc      	bne.n	8000e92 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 8000ed8:	9803      	ldr	r0, [sp, #12]
 8000eda:	2300      	movs	r3, #0
 8000edc:	f383 8811 	msr	BASEPRI, r3
}
 8000ee0:	b005      	add	sp, #20
 8000ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee6:	9902      	ldr	r1, [sp, #8]
 8000ee8:	4620      	mov	r0, r4
 8000eea:	f7ff fcb1 	bl	8000850 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	d0cf      	beq.n	8000e92 <iqReadTimeout+0x22>
 8000ef2:	9b03      	ldr	r3, [sp, #12]
 8000ef4:	1b98      	subs	r0, r3, r6
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f383 8811 	msr	BASEPRI, r3
}
 8000efc:	b005      	add	sp, #20
 8000efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    s2 = n - s1;
 8000f02:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f06:	4642      	mov	r2, r8
 8000f08:	4638      	mov	r0, r7
    s2 = n - s1;
 8000f0a:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8000f0c:	f7ff f9ee 	bl	80002ec <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 8000f10:	eb07 0008 	add.w	r0, r7, r8
 8000f14:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000f18:	68e1      	ldr	r1, [r4, #12]
 8000f1a:	4642      	mov	r2, r8
 8000f1c:	f7ff f9e6 	bl	80002ec <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 8000f20:	68e2      	ldr	r2, [r4, #12]
 8000f22:	4643      	mov	r3, r8
 8000f24:	18d3      	adds	r3, r2, r3
 8000f26:	61a3      	str	r3, [r4, #24]
 8000f28:	e7c5      	b.n	8000eb6 <iqReadTimeout+0x46>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8000f2a:	462a      	mov	r2, r5
 8000f2c:	4638      	mov	r0, r7
 8000f2e:	f7ff f9dd 	bl	80002ec <memcpy>
    iqp->q_rdptr += n;
 8000f32:	69a2      	ldr	r2, [r4, #24]
 8000f34:	442a      	add	r2, r5
 8000f36:	61a2      	str	r2, [r4, #24]
 8000f38:	e7bd      	b.n	8000eb6 <iqReadTimeout+0x46>
 8000f3a:	bf00      	nop
 8000f3c:	0000      	movs	r0, r0
	...

08000f40 <_readt>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8000f40:	300c      	adds	r0, #12
 8000f42:	f7ff bf95 	b.w	8000e70 <iqReadTimeout>
 8000f46:	bf00      	nop
	...

08000f50 <_read>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8000f50:	300c      	adds	r0, #12
 8000f52:	f04f 33ff 	mov.w	r3, #4294967295
 8000f56:	f7ff bf8b 	b.w	8000e70 <iqReadTimeout>
 8000f5a:	bf00      	nop
 8000f5c:	0000      	movs	r0, r0
	...

08000f60 <main>:

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000f60:	4bbd      	ldr	r3, [pc, #756]	; (8001258 <main+0x2f8>)
  PWR->CR |= PWR_CR_DBP;
 8000f62:	48be      	ldr	r0, [pc, #760]	; (800125c <main+0x2fc>)
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000f64:	691a      	ldr	r2, [r3, #16]
 8000f66:	ea6f 52c2 	mvn.w	r2, r2, lsl #23
 8000f6a:	ea6f 52d2 	mvn.w	r2, r2, lsr #23
/*
 * Application entry point.
 */
int main(void) {
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	611a      	str	r2, [r3, #16]
 8000f72:	691a      	ldr	r2, [r3, #16]
 8000f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f78:	611a      	str	r2, [r3, #16]
#if !defined(STM32F410xx)
  rccResetAHB2(~0);
 8000f7a:	f04f 34ff 	mov.w	r4, #4294967295
  rccResetAHB1(~STM32_GPIO_EN_MASK);
 8000f7e:	691a      	ldr	r2, [r3, #16]
  rccResetAHB2(~0);
 8000f80:	695a      	ldr	r2, [r3, #20]
 8000f82:	615c      	str	r4, [r3, #20]
 8000f84:	2200      	movs	r2, #0
 8000f86:	6959      	ldr	r1, [r3, #20]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	6959      	ldr	r1, [r3, #20]
#endif
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
 8000f8c:	6a19      	ldr	r1, [r3, #32]
 8000f8e:	f061 5180 	orn	r1, r1, #268435456	; 0x10000000
 8000f92:	6219      	str	r1, [r3, #32]
 8000f94:	6a19      	ldr	r1, [r3, #32]
 8000f96:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000f9a:	6219      	str	r1, [r3, #32]
 8000f9c:	6a19      	ldr	r1, [r3, #32]
  rccResetAPB2(~0);
 8000f9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000fa0:	625c      	str	r4, [r3, #36]	; 0x24
 8000fa2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000fa4:	625a      	str	r2, [r3, #36]	; 0x24
 8000fa6:	6a59      	ldr	r1, [r3, #36]	; 0x24

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8000fa8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000faa:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fae:	6419      	str	r1, [r3, #64]	; 0x40
 8000fb0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8000fb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000fb6:	6619      	str	r1, [r3, #96]	; 0x60
 8000fb8:	6e19      	ldr	r1, [r3, #96]	; 0x60
  PWR->CR |= PWR_CR_DBP;
 8000fba:	6801      	ldr	r1, [r0, #0]
 8000fbc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000fc0:	6001      	str	r1, [r0, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8000fc2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000fc4:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000fc8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000fcc:	b086      	sub	sp, #24
 8000fce:	d003      	beq.n	8000fd8 <main+0x78>
    RCC->BDCR = RCC_BDCR_BDRST;
 8000fd0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000fd4:	6719      	str	r1, [r3, #112]	; 0x70
    RCC->BDCR = 0;
 8000fd6:	671a      	str	r2, [r3, #112]	; 0x70
  PWR->CSR &= ~PWR_CSR_BRE;
 8000fd8:	4ca0      	ldr	r4, [pc, #640]	; (800125c <main+0x2fc>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000fda:	4aa1      	ldr	r2, [pc, #644]	; (8001260 <main+0x300>)
 8000fdc:	6861      	ldr	r1, [r4, #4]
#if !defined(SERIAL_ADVANCED_BUFFERING_SUPPORT) ||                          \
    (SERIAL_ADVANCED_BUFFERING_SUPPORT == FALSE) ||                         \
    defined(__DOXYGEN__)
void sdObjectInit(SerialDriver *sdp, qnotify_t inotify, qnotify_t onotify) {

  sdp->vmt = &vmt;
 8000fde:	4da1      	ldr	r5, [pc, #644]	; (8001264 <main+0x304>)
 8000fe0:	4fa1      	ldr	r7, [pc, #644]	; (8001268 <main+0x308>)

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8000fe2:	489d      	ldr	r0, [pc, #628]	; (8001258 <main+0x2f8>)
 8000fe4:	2360      	movs	r3, #96	; 0x60
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000fe6:	2640      	movs	r6, #64	; 0x40
 8000fe8:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8000fec:	6061      	str	r1, [r4, #4]
 8000fee:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8000ff2:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8000ffe:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001000:	f44f 7600 	mov.w	r6, #512	; 0x200
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001004:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
 8001008:	462c      	mov	r4, r5
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800100a:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800100e:	f8c2 c000 	str.w	ip, [r2]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001012:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001016:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800101a:	6011      	str	r1, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800101c:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001020:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001024:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001026:	f44f 6680 	mov.w	r6, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800102a:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800102e:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001032:	6016      	str	r6, [r2, #0]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001034:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001038:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800103c:	f8c2 6180 	str.w	r6, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001040:	6016      	str	r6, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001042:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001046:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800104a:	6051      	str	r1, [r2, #4]
 800104c:	f844 7b04 	str.w	r7, [r4], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001050:	606c      	str	r4, [r5, #4]
  iqp->q_buffer  = bp;
 8001052:	f105 0454 	add.w	r4, r5, #84	; 0x54
  iqp->q_counter = 0;
 8001056:	2100      	movs	r1, #0
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 8001058:	f04f 0e01 	mov.w	lr, #1
  iqp->q_top     = bp + size;
 800105c:	f105 0364 	add.w	r3, r5, #100	; 0x64
  tqp->next = (thread_t *)tqp;
 8001060:	f105 060c 	add.w	r6, r5, #12
  iqp->q_buffer  = bp;
 8001064:	61ac      	str	r4, [r5, #24]
  iqp->q_wrptr   = bp;
 8001066:	e9c5 4408 	strd	r4, r4, [r5, #32]
  oqp->q_counter = size;
 800106a:	2410      	movs	r4, #16
  tqp->prev = (thread_t *)tqp;
 800106c:	e9c5 6603 	strd	r6, r6, [r5, #12]
 8001070:	f885 e008 	strb.w	lr, [r5, #8]
  iqp->q_counter = 0;
 8001074:	6169      	str	r1, [r5, #20]
  iqp->q_top     = bp + size;
 8001076:	61eb      	str	r3, [r5, #28]
  oqp->q_counter = size;
 8001078:	63ac      	str	r4, [r5, #56]	; 0x38
 800107a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  oqp->q_buffer  = bp;
 800107c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800107e:	ea44 040e 	orr.w	r4, r4, lr
 8001082:	6404      	str	r4, [r0, #64]	; 0x40
 8001084:	6e04      	ldr	r4, [r0, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001086:	4f79      	ldr	r7, [pc, #484]	; (800126c <main+0x30c>)
  oqp->q_rdptr   = bp;
 8001088:	64ab      	str	r3, [r5, #72]	; 0x48
  ST_ENABLE_CLOCK();
 800108a:	ea44 040e 	orr.w	r4, r4, lr
 800108e:	6604      	str	r4, [r0, #96]	; 0x60
 8001090:	6e00      	ldr	r0, [r0, #96]	; 0x60
  ST_ENABLE_STOP();
 8001092:	68b8      	ldr	r0, [r7, #8]
  oqp->q_wrptr   = bp;
 8001094:	646b      	str	r3, [r5, #68]	; 0x44
 8001096:	ea40 000e 	orr.w	r0, r0, lr
  iqp->q_notify  = infy;
 800109a:	62a9      	str	r1, [r5, #40]	; 0x28
  iqp->q_link    = link;
 800109c:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 800109e:	652d      	str	r5, [r5, #80]	; 0x50
 80010a0:	60b8      	str	r0, [r7, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80010a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  tqp->next = (thread_t *)tqp;
 80010a6:	4c72      	ldr	r4, [pc, #456]	; (8001270 <main+0x310>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80010a8:	4e72      	ldr	r6, [pc, #456]	; (8001274 <main+0x314>)
 80010aa:	4b73      	ldr	r3, [pc, #460]	; (8001278 <main+0x318>)
 80010ac:	f242 07cf 	movw	r7, #8399	; 0x20cf
 80010b0:	6287      	str	r7, [r0, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80010b2:	f04f 37ff 	mov.w	r7, #4294967295
 80010b6:	62c7      	str	r7, [r0, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 80010b8:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCMR1  = 0;
 80010ba:	6181      	str	r1, [r0, #24]
  STM32_ST_TIM->CCR[0] = 0;
 80010bc:	6341      	str	r1, [r0, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
 80010be:	60c1      	str	r1, [r0, #12]
  STM32_ST_TIM->CR2    = 0;
 80010c0:	6041      	str	r1, [r0, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 80010c2:	f8c0 e014 	str.w	lr, [r0, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80010c6:	f8c0 e000 	str.w	lr, [r0]
  oqp->q_top     = bp + size;
 80010ca:	f105 0074 	add.w	r0, r5, #116	; 0x74
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80010ce:	f882 c31c 	strb.w	ip, [r2, #796]	; 0x31c
 80010d2:	6428      	str	r0, [r5, #64]	; 0x40
  oqp->q_notify  = onfy;
 80010d4:	4869      	ldr	r0, [pc, #420]	; (800127c <main+0x31c>)
 80010d6:	64e8      	str	r0, [r5, #76]	; 0x4c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80010d8:	f04f 5c80 	mov.w	ip, #268435456	; 0x10000000
  SD5.usart = UART5;
#endif

#if STM32_SERIAL_USE_USART6
  sdObjectInit(&SD6, NULL, notify6);
  SD6.usart = USART6;
 80010dc:	4868      	ldr	r0, [pc, #416]	; (8001280 <main+0x320>)
 80010de:	6768      	str	r0, [r5, #116]	; 0x74
 80010e0:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80010e4:	f8c2 c000 	str.w	ip, [r2]
  tqp->next = (thread_t *)tqp;
 80010e8:	f105 0230 	add.w	r2, r5, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 80010ec:	e9c5 220c 	strd	r2, r2, [r5, #48]	; 0x30
 80010f0:	4a64      	ldr	r2, [pc, #400]	; (8001284 <main+0x324>)
  tqp->next = (thread_t *)tqp;
 80010f2:	6024      	str	r4, [r4, #0]
  ch.rlist.prio = NOPRIO;
 80010f4:	60a1      	str	r1, [r4, #8]
 80010f6:	6032      	str	r2, [r6, #0]
 80010f8:	f106 020c 	add.w	r2, r6, #12
  tqp->prev = (thread_t *)tqp;
 80010fc:	e9c6 2203 	strd	r2, r2, [r6, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8001100:	f103 0210 	add.w	r2, r3, #16
 8001104:	611a      	str	r2, [r3, #16]
  H_NEXT(&default_heap.header) = NULL;
  H_PAGES(&default_heap.header) = 0;
 8001106:	e9c6 1101 	strd	r1, r1, [r6, #4]
 800110a:	f103 0224 	add.w	r2, r3, #36	; 0x24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 800110e:	6171      	str	r1, [r6, #20]
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 8001110:	2614      	movs	r6, #20
 8001112:	619e      	str	r6, [r3, #24]
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
 8001116:	f103 0628 	add.w	r6, r3, #40	; 0x28
 800111a:	221c      	movs	r2, #28
 800111c:	629e      	str	r6, [r3, #40]	; 0x28
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
 8001120:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8001124:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001128:	63de      	str	r6, [r3, #60]	; 0x3c
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
 800112c:	f103 0644 	add.w	r6, r3, #68	; 0x44
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001130:	f104 021c 	add.w	r2, r4, #28
 8001134:	645e      	str	r6, [r3, #68]	; 0x44
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001136:	e9c4 2207 	strd	r2, r2, [r4, #28]
  mp->align = align;
 800113a:	2604      	movs	r6, #4
  mp->provider = provider;
 800113c:	4a52      	ldr	r2, [pc, #328]	; (8001288 <main+0x328>)
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	639a      	str	r2, [r3, #56]	; 0x38
 8001142:	e9c3 3300 	strd	r3, r3, [r3]
 8001146:	6099      	str	r1, [r3, #8]
  mp->next = NULL;
 8001148:	6159      	str	r1, [r3, #20]
 800114a:	62d9      	str	r1, [r3, #44]	; 0x2c
  mp->align = align;
 800114c:	61de      	str	r6, [r3, #28]
 800114e:	635e      	str	r6, [r3, #52]	; 0x34
  ch_memcore.basemem = __heap_base__;
 8001150:	4a4e      	ldr	r2, [pc, #312]	; (800128c <main+0x32c>)
  ch_memcore.topmem  = __heap_end__;
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <main+0x330>)
  ch_memcore.basemem = __heap_base__;
 8001154:	484f      	ldr	r0, [pc, #316]	; (8001294 <main+0x334>)
  ch.tm.offset = (rtcnt_t)0;
 8001156:	6761      	str	r1, [r4, #116]	; 0x74
  ch_memcore.topmem  = __heap_end__;
 8001158:	e9c0 2300 	strd	r2, r3, [r0]
  tmp->cumulative = (rttime_t)0;
 800115c:	2200      	movs	r2, #0
 800115e:	2300      	movs	r3, #0
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001160:	e9c4 4404 	strd	r4, r4, [r4, #16]
  ch.vtlist.lasttime = (systime_t)0;
 8001164:	e9c4 7109 	strd	r7, r1, [r4, #36]	; 0x24
  tmp->best       = (rtcnt_t)-1;
 8001168:	9700      	str	r7, [sp, #0]
  tmp->cumulative = (rttime_t)0;
 800116a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  tmp->last       = (rtcnt_t)0;
 800116e:	e9cd 1101 	strd	r1, r1, [sp, #4]
  tmp->n          = (ucnt_t)0;
 8001172:	9103      	str	r1, [sp, #12]
    chTMStartMeasurementX(&tm);
 8001174:	4668      	mov	r0, sp
 8001176:	f7ff fa2b 	bl	80005d0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800117a:	4668      	mov	r0, sp
 800117c:	f7ff fa00 	bl	8000580 <chTMStopMeasurementX>
  } while (i > 0U);
 8001180:	3e01      	subs	r6, #1
 8001182:	d1f7      	bne.n	8001174 <main+0x214>
  REG_INSERT(tp);
 8001184:	4a44      	ldr	r2, [pc, #272]	; (8001298 <main+0x338>)
 8001186:	6967      	ldr	r7, [r4, #20]
  ch.tm.offset = tm.best;
 8001188:	9b00      	ldr	r3, [sp, #0]
 800118a:	6763      	str	r3, [r4, #116]	; 0x74
  tp->prio      = prio;
 800118c:	2080      	movs	r0, #128	; 0x80
  tp->refs      = (trefs_t)1;
 800118e:	2101      	movs	r1, #1
  tqp->next = (thread_t *)tqp;
 8001190:	f102 032c 	add.w	r3, r2, #44	; 0x2c
  tp->name      = name;
 8001194:	f8df e114 	ldr.w	lr, [pc, #276]	; 80012ac <main+0x34c>
  tp->prio      = prio;
 8001198:	63a0      	str	r0, [r4, #56]	; 0x38
  tlp->next = (thread_t *)tlp;
 800119a:	f102 0c28 	add.w	ip, r2, #40	; 0x28
  tp->realprio  = prio;
 800119e:	66e0      	str	r0, [r4, #108]	; 0x6c
  tp->flags     = CH_FLAG_MODE_STATIC;
 80011a0:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  tp->epending  = (eventmask_t)0;
 80011a4:	e9c4 6619 	strd	r6, r6, [r4, #100]	; 0x64
  REG_INSERT(tp);
 80011a8:	e9c4 4710 	strd	r4, r7, [r4, #64]	; 0x40
  tp->refs      = (trefs_t)1;
 80011ac:	f884 1052 	strb.w	r1, [r4, #82]	; 0x52
  tp->name      = name;
 80011b0:	f8c4 e048 	str.w	lr, [r4, #72]	; 0x48
 80011b4:	2020      	movs	r0, #32
  REG_INSERT(tp);
 80011b6:	613a      	str	r2, [r7, #16]
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80011b8:	e9c4 2205 	strd	r2, r2, [r4, #20]
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80011bc:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
  currp->wabase = NULL;
 80011c0:	64e6      	str	r6, [r4, #76]	; 0x4c
  tqp->next = (thread_t *)tqp;
 80011c2:	e9c4 c316 	strd	ip, r3, [r4, #88]	; 0x58
  tqp->prev = (thread_t *)tqp;
 80011c6:	6623      	str	r3, [r4, #96]	; 0x60
 80011c8:	f380 8811 	msr	BASEPRI, r0
  __ASM volatile ("cpsie i" : : : "memory");
 80011cc:	b662      	cpsie	i
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ce:	4b33      	ldr	r3, [pc, #204]	; (800129c <main+0x33c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80011d0:	4f33      	ldr	r7, [pc, #204]	; (80012a0 <main+0x340>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	f64f 0eff 	movw	lr, #63743	; 0xf8ff
 80011da:	ea0c 0c0e 	and.w	ip, ip, lr
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011de:	f10e 4e60 	add.w	lr, lr, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 80011e2:	ea4c 0707 	orr.w	r7, ip, r7
 80011e6:	f6ae 3e0f 	subw	lr, lr, #2831	; 0xb0f
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80011ea:	60df      	str	r7, [r3, #12]
 80011ec:	f8de 700c 	ldr.w	r7, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011f0:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 80012b0 <main+0x350>
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80011f4:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 80011f8:	f8ce 700c 	str.w	r7, [lr, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80011fc:	f8dc 7000 	ldr.w	r7, [ip]
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	f04f 0e10 	mov.w	lr, #16
 8001204:	430f      	orrs	r7, r1
 8001206:	f8cc 7000 	str.w	r7, [ip]
 800120a:	f883 e01f 	strb.w	lr, [r3, #31]
 800120e:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001212:	f386 8811 	msr	BASEPRI, r6
  __ASM volatile ("cpsie i" : : : "memory");
 8001216:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001218:	f380 8811 	msr	BASEPRI, r0
  tp->wabase = tdp->wbase;
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <main+0x344>)
  REG_INSERT(tp);
 800121e:	6960      	ldr	r0, [r4, #20]
  tp->prio      = prio;
 8001220:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  tp->mtxlist   = NULL;
 8001224:	e9c3 6132 	strd	r6, r1, [r3, #200]	; 0xc8
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001228:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 800122c:	4f1e      	ldr	r7, [pc, #120]	; (80012a8 <main+0x348>)
 800122e:	f8df e084 	ldr.w	lr, [pc, #132]	; 80012b4 <main+0x354>
  tp->name      = name;
 8001232:	f8df c084 	ldr.w	ip, [pc, #132]	; 80012b8 <main+0x358>
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001236:	66df      	str	r7, [r3, #108]	; 0x6c
 8001238:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800123c:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  REG_INSERT(tp);
 8001240:	f103 0790 	add.w	r7, r3, #144	; 0x90
  tp->state     = CH_STATE_WTSTART;
 8001244:	2102      	movs	r1, #2
 8001246:	f8a3 10b0 	strh.w	r1, [r3, #176]	; 0xb0
  REG_INSERT(tp);
 800124a:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  tp->epending  = (eventmask_t)0;
 800124e:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001252:	f8c3 e08c 	str.w	lr, [r3, #140]	; 0x8c
 8001256:	e031      	b.n	80012bc <main+0x35c>
 8001258:	40023800 	.word	0x40023800
 800125c:	40007000 	.word	0x40007000
 8001260:	e000e100 	.word	0xe000e100
 8001264:	20000800 	.word	0x20000800
 8001268:	08001cac 	.word	0x08001cac
 800126c:	e0042000 	.word	0xe0042000
 8001270:	2000087c 	.word	0x2000087c
 8001274:	20000e20 	.word	0x20000e20
 8001278:	200008f4 	.word	0x200008f4
 800127c:	080004f1 	.word	0x080004f1
 8001280:	40011400 	.word	0x40011400
 8001284:	080004b1 	.word	0x080004b1
 8001288:	08000551 	.word	0x08000551
 800128c:	20000e40 	.word	0x20000e40
 8001290:	20020000 	.word	0x20020000
 8001294:	20000a18 	.word	0x20000a18
 8001298:	200008ac 	.word	0x200008ac
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	05fa0300 	.word	0x05fa0300
 80012a4:	20000940 	.word	0x20000940
 80012a8:	080006e1 	.word	0x080006e1
 80012ac:	08001b64 	.word	0x08001b64
 80012b0:	e0001000 	.word	0xe0001000
 80012b4:	080002d1 	.word	0x080002d1
 80012b8:	08001b7c 	.word	0x08001b7c
  tp->name      = name;
 80012bc:	f8c3 c0a8 	str.w	ip, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80012c0:	671e      	str	r6, [r3, #112]	; 0x70
  REG_INSERT(tp);
 80012c2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 80012c6:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  REG_INSERT(tp);
 80012ca:	6107      	str	r7, [r0, #16]
  thread_t *otp = currp;
 80012cc:	69a0      	ldr	r0, [r4, #24]
  ntp->u.rdymsg = msg;
 80012ce:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
  if (ntp->prio <= otp->prio) {
 80012d2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80012d6:	6167      	str	r7, [r4, #20]
  tqp->next = (thread_t *)tqp;
 80012d8:	f103 01bc 	add.w	r1, r3, #188	; 0xbc
  tlp->next = (thread_t *)tlp;
 80012dc:	f103 0eb8 	add.w	lr, r3, #184	; 0xb8
  tqp->next = (thread_t *)tqp;
 80012e0:	e9c3 e12e 	strd	lr, r1, [r3, #184]	; 0xb8
  tqp->prev = (thread_t *)tqp;
 80012e4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 80012e8:	f1bc 0f00 	cmp.w	ip, #0
 80012ec:	d074      	beq.n	80013d8 <main+0x478>
  tp->state = CH_STATE_READY;
 80012ee:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
  cp = (thread_t *)&ch.rlist.queue;
 80012f2:	3a30      	subs	r2, #48	; 0x30
    cp = cp->queue.next;
 80012f4:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio >= tp->prio);
 80012f6:	6891      	ldr	r1, [r2, #8]
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d1fb      	bne.n	80012f4 <main+0x394>
  tp->queue.next             = cp;
 80012fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  tp->queue.prev             = cp->queue.prev;
 8001300:	6851      	ldr	r1, [r2, #4]
 8001302:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
  tp->queue.prev->queue.next = tp;
 8001306:	600f      	str	r7, [r1, #0]
  cp->queue.prev             = tp;
 8001308:	6057      	str	r7, [r2, #4]
 800130a:	2300      	movs	r3, #0
 800130c:	f383 8811 	msr	BASEPRI, r3
 8001310:	2320      	movs	r3, #32
 8001312:	f383 8811 	msr	BASEPRI, r3
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8001316:	7a2b      	ldrb	r3, [r5, #8]
 8001318:	2b01      	cmp	r3, #1
 800131a:	f000 80db 	beq.w	80014d4 <main+0x574>
  USART_TypeDef *u = sdp->usart;
 800131e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
  if ((sdp->usart == USART1) || (sdp->usart == USART6))
 8001320:	4a76      	ldr	r2, [pc, #472]	; (80014fc <main+0x59c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	f000 80d3 	beq.w	80014ce <main+0x56e>
 8001328:	4875      	ldr	r0, [pc, #468]	; (8001500 <main+0x5a0>)
    fck = STM32_PCLK2 / config->speed;
 800132a:	f240 4245 	movw	r2, #1093	; 0x445
 800132e:	f640 018b 	movw	r1, #2187	; 0x88b
 8001332:	4283      	cmp	r3, r0
 8001334:	bf08      	it	eq
 8001336:	460a      	moveq	r2, r1
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001338:	2040      	movs	r0, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800133a:	2401      	movs	r4, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800133c:	f242 172c 	movw	r7, #8492	; 0x212c
  u->SR = 0;
 8001340:	2100      	movs	r1, #0
  u->BRR = fck;
 8001342:	609a      	str	r2, [r3, #8]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001344:	6118      	str	r0, [r3, #16]

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001346:	2202      	movs	r2, #2
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001348:	615c      	str	r4, [r3, #20]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800134a:	60df      	str	r7, [r3, #12]
  u->SR = 0;
 800134c:	6019      	str	r1, [r3, #0]
    sdp->rxmask = 0xFF;
 800134e:	27ff      	movs	r7, #255	; 0xff
  (void)u->SR;  /* SR reset step 1.*/
 8001350:	f8d3 c000 	ldr.w	ip, [r3]
  (void)u->DR;  /* SR reset step 2.*/
 8001354:	685b      	ldr	r3, [r3, #4]
    sdp->rxmask = 0xFF;
 8001356:	f885 7078 	strb.w	r7, [r5, #120]	; 0x78
 800135a:	722a      	strb	r2, [r5, #8]
 800135c:	f381 8811 	msr	BASEPRI, r1
  palSetPadMode(GPIOC,6U,PAL_MODE_ALTERNATE(8));
 8001360:	f7ff f85e 	bl	8000420 <_pal_lld_setgroupmode.constprop.10>
  palSetPadMode(GPIOC,7U,PAL_MODE_ALTERNATE(8));
 8001364:	2080      	movs	r0, #128	; 0x80
 8001366:	f7ff f85b 	bl	8000420 <_pal_lld_setgroupmode.constprop.10>
   */
  halInit();
  chSysInit();

  initUART();
  myPrintf("Bismillah\r\n");
 800136a:	4866      	ldr	r0, [pc, #408]	; (8001504 <main+0x5a4>)
 800136c:	f7ff fb00 	bl	8000970 <myPrintf>

  const unsigned char  test[] = "123456789";
 8001370:	4b65      	ldr	r3, [pc, #404]	; (8001508 <main+0x5a8>)
 8001372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001376:	466b      	mov	r3, sp
 8001378:	c303      	stmia	r3!, {r0, r1}


  /*
   * Print the check value for the selected CRC algorithm.
   */
  myPrintf("The check value for the %s standard is 0x%X\n", CRC_NAME, CHECK_VALUE);
 800137a:	4964      	ldr	r1, [pc, #400]	; (800150c <main+0x5ac>)
  const unsigned char  test[] = "123456789";
 800137c:	801a      	strh	r2, [r3, #0]
  myPrintf("The check value for the %s standard is 0x%X\n", CRC_NAME, CHECK_VALUE);
 800137e:	4864      	ldr	r0, [pc, #400]	; (8001510 <main+0x5b0>)
 8001380:	4a64      	ldr	r2, [pc, #400]	; (8001514 <main+0x5b4>)
 8001382:	f7ff faf5 	bl	8000970 <myPrintf>
            /*
             * Try to divide the current data bit.
             */
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8001386:	f8df c198 	ldr.w	ip, [pc, #408]	; 8001520 <main+0x5c0>
			reflection |= (1 << ((nBits - 1) - bit));
 800138a:	4620      	mov	r0, r4
 800138c:	466d      	mov	r5, sp
 800138e:	af02      	add	r7, sp, #8
 8001390:	2331      	movs	r3, #49	; 0x31
    crc            remainder = INITIAL_REMAINDER;
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
	unsigned long  reflection = 0x00000000;
 8001396:	2400      	movs	r4, #0
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 8001398:	2107      	movs	r1, #7
		if (data & 0x01)
 800139a:	f013 0f01 	tst.w	r3, #1
			reflection |= (1 << ((nBits - 1) - bit));
 800139e:	bf1c      	itt	ne
 80013a0:	fa00 fe01 	lslne.w	lr, r0, r1
 80013a4:	ea44 040e 	orrne.w	r4, r4, lr
	for (bit = 0; bit < nBits; ++bit)
 80013a8:	f111 31ff 	adds.w	r1, r1, #4294967295
		data = (data >> 1);
 80013ac:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (bit = 0; bit < nBits; ++bit)
 80013b0:	d2f3      	bcs.n	800139a <main+0x43a>
        remainder ^= (REFLECT_DATA(message[byte]) << (WIDTH - 8));
 80013b2:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
 80013b6:	2308      	movs	r3, #8
            if (remainder & TOPBIT)
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80013be:	ea4f 0242 	mov.w	r2, r2, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 80013c2:	bfb8      	it	lt
 80013c4:	ea82 020c 	eorlt.w	r2, r2, ip
        for (bit = 8; bit > 0; --bit)
 80013c8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80013cc:	d1f4      	bne.n	80013b8 <main+0x458>
    for (byte = 0; byte < nBytes; ++byte)
 80013ce:	42af      	cmp	r7, r5
 80013d0:	d017      	beq.n	8001402 <main+0x4a2>
 80013d2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80013d6:	e7de      	b.n	8001396 <main+0x436>
  tp->state = CH_STATE_READY;
 80013d8:	f880 6020 	strb.w	r6, [r0, #32]
  cp = (thread_t *)&ch.rlist.queue;
 80013dc:	3a30      	subs	r2, #48	; 0x30
    cp = cp->queue.next;
 80013de:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80013e0:	6891      	ldr	r1, [r2, #8]
 80013e2:	2900      	cmp	r1, #0
 80013e4:	d1fb      	bne.n	80013de <main+0x47e>
  tp->queue.prev             = cp->queue.prev;
 80013e6:	6851      	ldr	r1, [r2, #4]
 80013e8:	e9c0 2100 	strd	r2, r1, [r0]
  tp->queue.prev->queue.next = tp;
 80013ec:	6008      	str	r0, [r1, #0]
  cp->queue.prev             = tp;
 80013ee:	6050      	str	r0, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80013f0:	2201      	movs	r2, #1
    chSysSwitch(ntp, otp);
 80013f2:	4601      	mov	r1, r0
    ntp->state = CH_STATE_CURRENT;
 80013f4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    chSysSwitch(ntp, otp);
 80013f8:	4847      	ldr	r0, [pc, #284]	; (8001518 <main+0x5b8>)
    currp = ntp;
 80013fa:	61a7      	str	r7, [r4, #24]
    chSysSwitch(ntp, otp);
 80013fc:	f7fe ff60 	bl	80002c0 <_port_switch>
 8001400:	e783      	b.n	800130a <main+0x3aa>
 8001402:	211f      	movs	r1, #31
			reflection |= (1 << ((nBits - 1) - bit));
 8001404:	2001      	movs	r0, #1
		if (data & 0x01)
 8001406:	f012 0f01 	tst.w	r2, #1
			reflection |= (1 << ((nBits - 1) - bit));
 800140a:	bf1c      	itt	ne
 800140c:	fa00 f401 	lslne.w	r4, r0, r1
 8001410:	4323      	orrne	r3, r4
	for (bit = 0; bit < nBits; ++bit)
 8001412:	f111 31ff 	adds.w	r1, r1, #4294967295
		data = (data >> 1);
 8001416:	ea4f 0252 	mov.w	r2, r2, lsr #1
	for (bit = 0; bit < nBits; ++bit)
 800141a:	d2f4      	bcs.n	8001406 <main+0x4a6>

  /*
   * Compute the CRC of the test message, slowly.
   */
  myPrintf("The crcSlow() of \"123456789\" is 0x%X\n", crcSlow(test, strlen(test)));
 800141c:	43d9      	mvns	r1, r3
 800141e:	483f      	ldr	r0, [pc, #252]	; (800151c <main+0x5bc>)
            /*
             * Try to divide the current data bit.
             */			
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
 8001420:	4c3f      	ldr	r4, [pc, #252]	; (8001520 <main+0x5c0>)
 8001422:	f7ff faa5 	bl	8000970 <myPrintf>
 8001426:	483f      	ldr	r0, [pc, #252]	; (8001524 <main+0x5c4>)
 8001428:	2500      	movs	r5, #0
 800142a:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
        remainder = dividend << (WIDTH - 8);
 800142e:	4629      	mov	r1, r5
 8001430:	2308      	movs	r3, #8
            if (remainder & TOPBIT)
 8001432:	2900      	cmp	r1, #0
 8001434:	f103 33ff 	add.w	r3, r3, #4294967295
 8001438:	ea4f 0141 	mov.w	r1, r1, lsl #1
                remainder = (remainder << 1) ^ POLYNOMIAL;
 800143c:	bfb8      	it	lt
 800143e:	4061      	eorlt	r1, r4
        for (bit = 8; bit > 0; --bit)
 8001440:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8001444:	d1f5      	bne.n	8001432 <main+0x4d2>
        }

        /*
         * Store the result into the table.
         */
        crcTable[dividend] = remainder;
 8001446:	f840 1f04 	str.w	r1, [r0, #4]!
    for (dividend = 0; dividend < 256; ++dividend)
 800144a:	4584      	cmp	ip, r0
 800144c:	f105 7580 	add.w	r5, r5, #16777216	; 0x1000000
 8001450:	d1ed      	bne.n	800142e <main+0x4ce>
 8001452:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8001534 <main+0x5d4>
 8001456:	4668      	mov	r0, sp
 8001458:	2331      	movs	r3, #49	; 0x31
 *
 *********************************************************************/
crc
crcFast(unsigned char const message[], int nBytes)
{
    crc	           remainder = INITIAL_REMAINDER;
 800145a:	f04f 31ff 	mov.w	r1, #4294967295
			reflection |= (1 << ((nBits - 1) - bit));
 800145e:	f04f 0c01 	mov.w	ip, #1
	unsigned long  reflection = 0x00000000;
 8001462:	2400      	movs	r4, #0
    /*
     * Divide the message by the polynomial, a byte at a time.
     */
    for (byte = 0; byte < nBytes; ++byte)
    {
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
 8001464:	2207      	movs	r2, #7
		if (data & 0x01)
 8001466:	f013 0f01 	tst.w	r3, #1
			reflection |= (1 << ((nBits - 1) - bit));
 800146a:	bf1c      	itt	ne
 800146c:	fa0c f502 	lslne.w	r5, ip, r2
 8001470:	432c      	orrne	r4, r5
	for (bit = 0; bit < nBits; ++bit)
 8001472:	f112 32ff 	adds.w	r2, r2, #4294967295
		data = (data >> 1);
 8001476:	ea4f 0353 	mov.w	r3, r3, lsr #1
	for (bit = 0; bit < nBits; ++bit)
 800147a:	d2f4      	bcs.n	8001466 <main+0x506>
        data = REFLECT_DATA(message[byte]) ^ (remainder >> (WIDTH - 8));
 800147c:	ea84 6311 	eor.w	r3, r4, r1, lsr #24
  		remainder = crcTable[data] ^ (remainder << 8);
 8001480:	b2db      	uxtb	r3, r3
    for (byte = 0; byte < nBytes; ++byte)
 8001482:	4287      	cmp	r7, r0
  		remainder = crcTable[data] ^ (remainder << 8);
 8001484:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8001488:	ea83 2101 	eor.w	r1, r3, r1, lsl #8
    for (byte = 0; byte < nBytes; ++byte)
 800148c:	d002      	beq.n	8001494 <main+0x534>
 800148e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8001492:	e7e6      	b.n	8001462 <main+0x502>
 8001494:	231f      	movs	r3, #31
			reflection |= (1 << ((nBits - 1) - bit));
 8001496:	2201      	movs	r2, #1
		if (data & 0x01)
 8001498:	f011 0f01 	tst.w	r1, #1
			reflection |= (1 << ((nBits - 1) - bit));
 800149c:	bf1c      	itt	ne
 800149e:	fa02 f003 	lslne.w	r0, r2, r3
 80014a2:	4306      	orrne	r6, r0
	for (bit = 0; bit < nBits; ++bit)
 80014a4:	f113 33ff 	adds.w	r3, r3, #4294967295
		data = (data >> 1);
 80014a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
	for (bit = 0; bit < nBits; ++bit)
 80014ac:	d2f4      	bcs.n	8001498 <main+0x538>

  /*
   * Compute the CRC of the test message, more efficiently.
   */
  crcInit();
  myPrintf("The crcFast() of \"123456789\" is 0x%X\n", crcFast(test, strlen(test)));
 80014ae:	43f1      	mvns	r1, r6
 80014b0:	481d      	ldr	r0, [pc, #116]	; (8001528 <main+0x5c8>)
 80014b2:	f7ff fa5d 	bl	8000970 <myPrintf>
 80014b6:	2420      	movs	r4, #32
 80014b8:	f384 8811 	msr	BASEPRI, r4
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 80014bc:	f241 3188 	movw	r1, #5000	; 0x1388
 80014c0:	2008      	movs	r0, #8
 80014c2:	f7ff f935 	bl	8000730 <chSchGoSleepTimeoutS>
 80014c6:	2300      	movs	r3, #0
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	e7f4      	b.n	80014b8 <main+0x558>
    fck = STM32_PCLK2 / config->speed;
 80014ce:	f640 028b 	movw	r2, #2187	; 0x88b
 80014d2:	e731      	b.n	8001338 <main+0x3d8>
      nvicEnableVector(STM32_UART5_NUMBER, STM32_SERIAL_UART5_PRIORITY);
    }
#endif
#if STM32_SERIAL_USE_USART6
    if (&SD6 == sdp) {
      rccEnableUSART6(true);
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <main+0x5cc>)
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <main+0x5d0>)
 80014d8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014da:	f041 0120 	orr.w	r1, r1, #32
 80014de:	6459      	str	r1, [r3, #68]	; 0x44
 80014e0:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80014e2:	f041 0120 	orr.w	r1, r1, #32
 80014e6:	6659      	str	r1, [r3, #100]	; 0x64
 80014e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014ea:	21c0      	movs	r1, #192	; 0xc0
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80014ec:	2380      	movs	r3, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80014ee:	f882 1347 	strb.w	r1, [r2, #839]	; 0x347
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80014f2:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80014f6:	6093      	str	r3, [r2, #8]
 80014f8:	e711      	b.n	800131e <main+0x3be>
 80014fa:	bf00      	nop
 80014fc:	40011000 	.word	0x40011000
 8001500:	40011400 	.word	0x40011400
 8001504:	08001b84 	.word	0x08001b84
 8001508:	08001c18 	.word	0x08001c18
 800150c:	08001b90 	.word	0x08001b90
 8001510:	08001b98 	.word	0x08001b98
 8001514:	cbf43926 	.word	0xcbf43926
 8001518:	200009d0 	.word	0x200009d0
 800151c:	08001bc8 	.word	0x08001bc8
 8001520:	04c11db7 	.word	0x04c11db7
 8001524:	20000a1c 	.word	0x20000a1c
 8001528:	08001bf0 	.word	0x08001bf0
 800152c:	40023800 	.word	0x40023800
 8001530:	e000e100 	.word	0xe000e100
 8001534:	20000a20 	.word	0x20000a20
	...

08001540 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001540:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8001544:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8001546:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800154a:	2300      	movs	r3, #0
 800154c:	f383 8811 	msr	BASEPRI, r3
}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
	...

08001560 <chThdExit>:
void chThdExit(msg_t msg) {
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	2220      	movs	r2, #32
 8001564:	4603      	mov	r3, r0
 8001566:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <chThdExit+0x4c>)
 800156c:	6994      	ldr	r4, [r2, #24]
  return (bool)(tlp->next != (thread_t *)tlp);
 800156e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8001570:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8001572:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8001576:	42a8      	cmp	r0, r5
 8001578:	d006      	beq.n	8001588 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800157a:	6803      	ldr	r3, [r0, #0]
 800157c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800157e:	f7ff f867 	bl	8000650 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8001582:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8001584:	42a8      	cmp	r0, r5
 8001586:	d1f8      	bne.n	800157a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 8001588:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800158c:	b943      	cbnz	r3, 80015a0 <chThdExit+0x40>
 800158e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001592:	079b      	lsls	r3, r3, #30
 8001594:	d104      	bne.n	80015a0 <chThdExit+0x40>
    REG_REMOVE(tp);
 8001596:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	6922      	ldr	r2, [r4, #16]
 800159e:	6153      	str	r3, [r2, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80015a0:	200f      	movs	r0, #15
}
 80015a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80015a6:	f7ff b8ab 	b.w	8000700 <chSchGoSleepS>
 80015aa:	bf00      	nop
 80015ac:	2000087c 	.word	0x2000087c

080015b0 <chSchDoReschedule>:
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <chSchDoReschedule+0x3c>)
  thread_t *tp = tqp->next;
 80015b2:	6810      	ldr	r0, [r2, #0]
  tqp->next             = tp->queue.next;
 80015b4:	6803      	ldr	r3, [r0, #0]
void chSchDoReschedule(void) {
 80015b6:	b430      	push	{r4, r5}

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80015b8:	2101      	movs	r1, #1
  thread_t *otp = currp;
 80015ba:	6994      	ldr	r4, [r2, #24]
  tqp->next->queue.prev = (thread_t *)tqp;
 80015bc:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 80015be:	2500      	movs	r5, #0
  currp->state = CH_STATE_CURRENT;
 80015c0:	f880 1020 	strb.w	r1, [r0, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80015c4:	68a1      	ldr	r1, [r4, #8]
  tqp->next             = tp->queue.next;
 80015c6:	6013      	str	r3, [r2, #0]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80015c8:	6190      	str	r0, [r2, #24]
  tp->state = CH_STATE_READY;
 80015ca:	f884 5020 	strb.w	r5, [r4, #32]
 80015ce:	e000      	b.n	80015d2 <chSchDoReschedule+0x22>
 80015d0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	4291      	cmp	r1, r2
 80015d6:	d3fb      	bcc.n	80015d0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80015d8:	685a      	ldr	r2, [r3, #4]
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80015da:	4621      	mov	r1, r4
  tp->queue.prev             = cp->queue.prev;
 80015dc:	e9c4 3200 	strd	r3, r2, [r4]
  tp->queue.prev->queue.next = tp;
 80015e0:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80015e2:	605c      	str	r4, [r3, #4]
}
 80015e4:	bc30      	pop	{r4, r5}
  chSysSwitch(currp, otp);
 80015e6:	f7fe be6b 	b.w	80002c0 <_port_switch>
 80015ea:	bf00      	nop
 80015ec:	2000087c 	.word	0x2000087c

080015f0 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80015f0:	4a7e      	ldr	r2, [pc, #504]	; (80017ec <__early_init+0x1fc>)
  gpiop->OTYPER  = config->otyper;
 80015f2:	487f      	ldr	r0, [pc, #508]	; (80017f0 <__early_init+0x200>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80015f4:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 80015f6:	f8df c24c 	ldr.w	ip, [pc, #588]	; 8001844 <__early_init+0x254>
  rccResetAHB1(STM32_GPIO_EN_MASK);
 80015fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015fe:	430b      	orrs	r3, r1
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 8001600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001604:	6113      	str	r3, [r2, #16]
 8001606:	6913      	ldr	r3, [r2, #16]
  gpiop->OTYPER  = config->otyper;
 8001608:	4e7a      	ldr	r6, [pc, #488]	; (80017f4 <__early_init+0x204>)
  gpiop->PUPDR   = config->pupdr;
 800160a:	f8df e23c 	ldr.w	lr, [pc, #572]	; 8001848 <__early_init+0x258>
  gpiop->AFRL    = config->afrl;
 800160e:	4f7a      	ldr	r7, [pc, #488]	; (80017f8 <__early_init+0x208>)
  gpiop->OTYPER  = config->otyper;
 8001610:	4d7a      	ldr	r5, [pc, #488]	; (80017fc <__early_init+0x20c>)
 8001612:	4c7b      	ldr	r4, [pc, #492]	; (8001800 <__early_init+0x210>)
  rccResetAHB1(STM32_GPIO_EN_MASK);
 8001614:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6113      	str	r3, [r2, #16]
 800161e:	6913      	ldr	r3, [r2, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001620:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001622:	430b      	orrs	r3, r1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001628:	430b      	orrs	r3, r1
 800162a:	6513      	str	r3, [r2, #80]	; 0x50
  gpiop->OSPEEDR = config->ospeedr;
 800162c:	f46f 41a8 	mvn.w	r1, #21504	; 0x5400
  gpiop->OTYPER  = config->otyper;
 8001630:	2300      	movs	r3, #0
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
 8001632:	f8d2 8050 	ldr.w	r8, [r2, #80]	; 0x50
  gpiop->OTYPER  = config->otyper;
 8001636:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001638:	6081      	str	r1, [r0, #8]
  gpiop->ODR     = config->odr;
 800163a:	f64f 71ff 	movw	r1, #65535	; 0xffff
  gpiop->PUPDR   = config->pupdr;
 800163e:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 8001642:	f8df 8208 	ldr.w	r8, [pc, #520]	; 800184c <__early_init+0x25c>
  gpiop->ODR     = config->odr;
 8001646:	6141      	str	r1, [r0, #20]
  gpiop->MODER   = config->moder;
 8001648:	f8df e204 	ldr.w	lr, [pc, #516]	; 8001850 <__early_init+0x260>
  gpiop->AFRL    = config->afrl;
 800164c:	6207      	str	r7, [r0, #32]
  gpiop->OTYPER  = config->otyper;
 800164e:	f44f 7710 	mov.w	r7, #576	; 0x240
  gpiop->AFRH    = config->afrh;
 8001652:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001656:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OTYPER  = config->otyper;
 800165a:	6077      	str	r7, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
  gpiop->PUPDR   = config->pupdr;
 8001660:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8001854 <__early_init+0x264>
  gpiop->OSPEEDR = config->ospeedr;
 8001664:	60b0      	str	r0, [r6, #8]
  gpiop->AFRL    = config->afrl;
 8001666:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
  gpiop->PUPDR   = config->pupdr;
 800166a:	f8c6 e00c 	str.w	lr, [r6, #12]
  gpiop->ODR     = config->odr;
 800166e:	6171      	str	r1, [r6, #20]
  gpiop->AFRH    = config->afrh;
 8001670:	f04f 0e40 	mov.w	lr, #64	; 0x40
  gpiop->AFRL    = config->afrl;
 8001674:	6237      	str	r7, [r6, #32]
  gpiop->MODER   = config->moder;
 8001676:	4f63      	ldr	r7, [pc, #396]	; (8001804 <__early_init+0x214>)
  gpiop->AFRH    = config->afrh;
 8001678:	f8c6 e024 	str.w	lr, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800167c:	6037      	str	r7, [r6, #0]
  gpiop->PUPDR   = config->pupdr;
 800167e:	f106 56a2 	add.w	r6, r6, #339738624	; 0x14400000
 8001682:	f506 3644 	add.w	r6, r6, #200704	; 0x31000
 8001686:	f506 76aa 	add.w	r6, r6, #340	; 0x154
  gpiop->OTYPER  = config->otyper;
 800168a:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800168c:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 800168e:	60ee      	str	r6, [r5, #12]
  gpiop->AFRL    = config->afrl;
 8001690:	f04f 46c0 	mov.w	r6, #1610612736	; 0x60000000
  gpiop->ODR     = config->odr;
 8001694:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 8001696:	622e      	str	r6, [r5, #32]
  gpiop->AFRH    = config->afrh;
 8001698:	4e5b      	ldr	r6, [pc, #364]	; (8001808 <__early_init+0x218>)
 800169a:	626e      	str	r6, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800169c:	4e5b      	ldr	r6, [pc, #364]	; (800180c <__early_init+0x21c>)
 800169e:	602e      	str	r6, [r5, #0]
  gpiop->PUPDR   = config->pupdr;
 80016a0:	4d5b      	ldr	r5, [pc, #364]	; (8001810 <__early_init+0x220>)
  gpiop->OTYPER  = config->otyper;
 80016a2:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80016a4:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80016a6:	60e5      	str	r5, [r4, #12]
  gpiop->ODR     = config->odr;
 80016a8:	f640 75ff 	movw	r5, #4095	; 0xfff
 80016ac:	6165      	str	r5, [r4, #20]
  gpiop->OTYPER  = config->otyper;
 80016ae:	4f59      	ldr	r7, [pc, #356]	; (8001814 <__early_init+0x224>)
 80016b0:	4e59      	ldr	r6, [pc, #356]	; (8001818 <__early_init+0x228>)
  gpiop->MODER   = config->moder;
 80016b2:	4d5a      	ldr	r5, [pc, #360]	; (800181c <__early_init+0x22c>)
  gpiop->AFRL    = config->afrl;
 80016b4:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80016b6:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016b8:	6025      	str	r5, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 80016ba:	f8cc 3004 	str.w	r3, [ip, #4]
 80016be:	4d58      	ldr	r5, [pc, #352]	; (8001820 <__early_init+0x230>)
  gpiop->OSPEEDR = config->ospeedr;
 80016c0:	f8cc 0008 	str.w	r0, [ip, #8]
  gpiop->OTYPER  = config->otyper;
 80016c4:	f504 54a0 	add.w	r4, r4, #5120	; 0x1400
  gpiop->PUPDR   = config->pupdr;
 80016c8:	f8cc 300c 	str.w	r3, [ip, #12]
  gpiop->ODR     = config->odr;
 80016cc:	f8cc 1014 	str.w	r1, [ip, #20]
  gpiop->AFRL    = config->afrl;
 80016d0:	f8cc 3020 	str.w	r3, [ip, #32]
  gpiop->AFRH    = config->afrh;
 80016d4:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016d8:	f8cc e000 	str.w	lr, [ip]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
#endif

  /* PWR initialization.*/
#if defined(STM32F4XX) || defined(__DOXYGEN__)
  PWR->CR = STM32_VOS;
 80016dc:	f5ac 3cd0 	sub.w	ip, ip, #106496	; 0x1a000
  gpiop->OTYPER  = config->otyper;
 80016e0:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80016e2:	60b8      	str	r0, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80016e4:	60fb      	str	r3, [r7, #12]
  gpiop->ODR     = config->odr;
 80016e6:	6179      	str	r1, [r7, #20]
  gpiop->AFRL    = config->afrl;
 80016e8:	623b      	str	r3, [r7, #32]
  gpiop->AFRH    = config->afrh;
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016ec:	603b      	str	r3, [r7, #0]
  gpiop->OTYPER  = config->otyper;
 80016ee:	6073      	str	r3, [r6, #4]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 80016f0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  gpiop->OSPEEDR = config->ospeedr;
 80016f4:	60b0      	str	r0, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 80016f6:	60f3      	str	r3, [r6, #12]
  gpiop->ODR     = config->odr;
 80016f8:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80016fa:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80016fc:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80016fe:	6033      	str	r3, [r6, #0]
  PWR->CR = STM32_VOS;
 8001700:	f44f 4640 	mov.w	r6, #49152	; 0xc000
  gpiop->OTYPER  = config->otyper;
 8001704:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001706:	60a8      	str	r0, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8001708:	60eb      	str	r3, [r5, #12]
  gpiop->ODR     = config->odr;
 800170a:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 800170c:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800170e:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8001710:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 8001712:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8001714:	60a0      	str	r0, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8001716:	60e3      	str	r3, [r4, #12]
  gpiop->ODR     = config->odr;
 8001718:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800171a:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800171c:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800171e:	6023      	str	r3, [r4, #0]
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
 8001720:	6417      	str	r7, [r2, #64]	; 0x40
  PWR->CR = STM32_VOS;
 8001722:	f8cc 6000 	str.w	r6, [ip]
  PWR->CR = 0;
#endif

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8001726:	6813      	ldr	r3, [r2, #0]
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800172e:	6813      	ldr	r3, [r2, #0]
 8001730:	079d      	lsls	r5, r3, #30
 8001732:	d5fc      	bpl.n	800172e <__early_init+0x13e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001734:	6893      	ldr	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001736:	492d      	ldr	r1, [pc, #180]	; (80017ec <__early_init+0x1fc>)
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 8001738:	f023 0303 	bic.w	r3, r3, #3
 800173c:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800173e:	688b      	ldr	r3, [r1, #8]
 8001740:	f013 030c 	ands.w	r3, r3, #12
 8001744:	d1fb      	bne.n	800173e <__early_init+0x14e>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8001746:	680a      	ldr	r2, [r1, #0]
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8001748:	4828      	ldr	r0, [pc, #160]	; (80017ec <__early_init+0x1fc>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800174a:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800174e:	600a      	str	r2, [r1, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8001750:	608b      	str	r3, [r1, #8]
  RCC->CR |= RCC_CR_HSEON;
 8001752:	680b      	ldr	r3, [r1, #0]
 8001754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001758:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 800175a:	6803      	ldr	r3, [r0, #0]
 800175c:	039c      	lsls	r4, r3, #14
 800175e:	d5fc      	bpl.n	800175a <__early_init+0x16a>
    ;                           /* Waits until HSE is stable.               */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 8001760:	6f43      	ldr	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8001762:	4a22      	ldr	r2, [pc, #136]	; (80017ec <__early_init+0x1fc>)
  RCC->CSR |= RCC_CSR_LSION;
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6743      	str	r3, [r0, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800176a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800176c:	0799      	lsls	r1, r3, #30
 800176e:	d5fc      	bpl.n	800176a <__early_init+0x17a>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <__early_init+0x234>)
 8001772:	6053      	str	r3, [r2, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
 8001774:	6813      	ldr	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
#if defined(STM32F4XX)
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 8001776:	492c      	ldr	r1, [pc, #176]	; (8001828 <__early_init+0x238>)
  RCC->CR |= RCC_CR_PLLON;
 8001778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800177c:	6013      	str	r3, [r2, #0]
  while ((PWR->CSR & PWR_CSR_VOSRDY) == 0)
 800177e:	684b      	ldr	r3, [r1, #4]
 8001780:	045a      	lsls	r2, r3, #17
 8001782:	d5fc      	bpl.n	800177e <__early_init+0x18e>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */
#endif /* defined(STM32F4XX) */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <__early_init+0x1fc>)
 8001786:	6813      	ldr	r3, [r2, #0]
 8001788:	019b      	lsls	r3, r3, #6
 800178a:	d5fc      	bpl.n	8001786 <__early_init+0x196>

  /* Flash setup.*/
#if !defined(STM32_REMOVE_REVISION_A_FIX)
  /* Some old revisions of F4x MCUs randomly crashes with compiler
     optimizations enabled AND flash caches enabled. */
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <__early_init+0x23c>)
  RCC->CFGR = STM32_MCO2PRE | STM32_MCO2SEL | STM32_MCO1PRE | STM32_MCO1SEL |
 800178e:	4928      	ldr	r1, [pc, #160]	; (8001830 <__early_init+0x240>)
 8001790:	6091      	str	r1, [r2, #8]
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <__early_init+0x244>)
 8001796:	429a      	cmp	r2, r3
 8001798:	d01e      	beq.n	80017d8 <__early_init+0x1e8>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  else
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
 800179a:	4b27      	ldr	r3, [pc, #156]	; (8001838 <__early_init+0x248>)
 800179c:	f240 7205 	movw	r2, #1797	; 0x705
 80017a0:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_DCEN | STM32_FLASHBITS;
#else
  FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |
               FLASH_ACR_DCEN | STM32_FLASHBITS;
#endif
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
 80017a2:	4a25      	ldr	r2, [pc, #148]	; (8001838 <__early_init+0x248>)
 80017a4:	6813      	ldr	r3, [r2, #0]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	2b05      	cmp	r3, #5
 80017ac:	d1fa      	bne.n	80017a4 <__early_init+0x1b4>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 80017ae:	4a0f      	ldr	r2, [pc, #60]	; (80017ec <__early_init+0x1fc>)
 80017b0:	6893      	ldr	r3, [r2, #8]
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80017b8:	6893      	ldr	r3, [r2, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d1fa      	bne.n	80017b8 <__early_init+0x1c8>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80017c2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6653      	str	r3, [r2, #100]	; 0x64
 80017d2:	6e53      	ldr	r3, [r2, #100]	; 0x64

  stm32_gpio_init();
  stm32_clock_init();
}
 80017d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((DBGMCU->IDCODE == 0x20006411) && (SCB->CPUID == 0x410FC241))
 80017d8:	4a18      	ldr	r2, [pc, #96]	; (800183c <__early_init+0x24c>)
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <__early_init+0x250>)
 80017dc:	6812      	ldr	r2, [r2, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d1db      	bne.n	800179a <__early_init+0x1aa>
    FLASH->ACR = FLASH_ACR_PRFTEN | STM32_FLASHBITS;
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <__early_init+0x248>)
 80017e4:	f240 1205 	movw	r2, #261	; 0x105
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e7da      	b.n	80017a2 <__early_init+0x1b2>
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	40020400 	.word	0x40020400
 80017f8:	55560000 	.word	0x55560000
 80017fc:	40020800 	.word	0x40020800
 8001800:	40020c00 	.word	0x40020c00
 8001804:	00082080 	.word	0x00082080
 8001808:	00060600 	.word	0x00060600
 800180c:	02208001 	.word	0x02208001
 8001810:	00555055 	.word	0x00555055
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	55000100 	.word	0x55000100
 8001820:	40021c00 	.word	0x40021c00
 8001824:	07405408 	.word	0x07405408
 8001828:	40007000 	.word	0x40007000
 800182c:	e0042000 	.word	0xe0042000
 8001830:	38889400 	.word	0x38889400
 8001834:	20006411 	.word	0x20006411
 8001838:	40023c00 	.word	0x40023c00
 800183c:	e000ed00 	.word	0xe000ed00
 8001840:	410fc241 	.word	0x410fc241
 8001844:	40021000 	.word	0x40021000
 8001848:	40010054 	.word	0x40010054
 800184c:	000aaa00 	.word	0x000aaa00
 8001850:	2aa0aa00 	.word	0x2aa0aa00
 8001854:	55514515 	.word	0x55514515
	...

08001860 <Vector15C>:
OSAL_IRQ_HANDLER(STM32_USART6_HANDLER) {
 8001860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  USART_TypeDef *u = sdp->usart;
 8001864:	4d68      	ldr	r5, [pc, #416]	; (8001a08 <Vector15C+0x1a8>)
 8001866:	6f6e      	ldr	r6, [r5, #116]	; 0x74
  uint16_t cr1 = u->CR1;
 8001868:	f8d6 800c 	ldr.w	r8, [r6, #12]
  uint16_t sr = u->SR;
 800186c:	6833      	ldr	r3, [r6, #0]
  if (sr & USART_SR_LBD) {
 800186e:	05da      	lsls	r2, r3, #23
  uint16_t sr = u->SR;
 8001870:	b29c      	uxth	r4, r3
  if (sr & USART_SR_LBD) {
 8001872:	d47d      	bmi.n	8001970 <Vector15C+0x110>
 8001874:	2320      	movs	r3, #32
 8001876:	f383 8811 	msr	BASEPRI, r3
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 800187a:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800187e:	d04d      	beq.n	800191c <Vector15C+0xbc>
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  if (queue_notempty(tqp)) {
 8001880:	4f62      	ldr	r7, [pc, #392]	; (8001a0c <Vector15C+0x1ac>)

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001882:	f04f 0900 	mov.w	r9, #0
 8001886:	e008      	b.n	800189a <Vector15C+0x3a>
    if (sr & USART_SR_RXNE)
 8001888:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 800188a:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 800188e:	d41d      	bmi.n	80018cc <Vector15C+0x6c>
    sr = u->SR;
 8001890:	6834      	ldr	r4, [r6, #0]
 8001892:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001894:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 8001898:	d040      	beq.n	800191c <Vector15C+0xbc>
    if (sr & (USART_SR_ORE | USART_SR_NE | USART_SR_FE  | USART_SR_PE))
 800189a:	0723      	lsls	r3, r4, #28
 800189c:	d0f4      	beq.n	8001888 <Vector15C+0x28>
    sts |= SD_OVERRUN_ERROR;
 800189e:	f014 0f08 	tst.w	r4, #8
 80018a2:	bf0c      	ite	eq
 80018a4:	2000      	moveq	r0, #0
 80018a6:	2080      	movne	r0, #128	; 0x80
  if (sr & USART_SR_PE)
 80018a8:	07e1      	lsls	r1, r4, #31
    sts |= SD_PARITY_ERROR;
 80018aa:	bf48      	it	mi
 80018ac:	f040 0020 	orrmi.w	r0, r0, #32
  if (sr & USART_SR_FE)
 80018b0:	07a2      	lsls	r2, r4, #30
    sts |= SD_FRAMING_ERROR;
 80018b2:	bf48      	it	mi
 80018b4:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
  if (sr & USART_SR_NE)
 80018b8:	0763      	lsls	r3, r4, #29
    sts |= SD_NOISE_ERROR;
 80018ba:	bf48      	it	mi
 80018bc:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80018c0:	f7fe fede 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
    if (sr & USART_SR_RXNE)
 80018c4:	06a1      	lsls	r1, r4, #26
    b = (uint8_t)u->DR & sdp->rxmask;
 80018c6:	f8d6 a004 	ldr.w	sl, [r6, #4]
    if (sr & USART_SR_RXNE)
 80018ca:	d5e1      	bpl.n	8001890 <Vector15C+0x30>
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80018cc:	696b      	ldr	r3, [r5, #20]
    b = (uint8_t)u->DR & sdp->rxmask;
 80018ce:	f895 4078 	ldrb.w	r4, [r5, #120]	; 0x78
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03d      	beq.n	8001952 <Vector15C+0xf2>
  if (!iqIsFullI(iqp)) {
 80018d6:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 80018da:	4293      	cmp	r3, r2
 80018dc:	d040      	beq.n	8001960 <Vector15C+0x100>
    iqp->q_counter++;
 80018de:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80018e0:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 80018e2:	3201      	adds	r2, #1
 80018e4:	ea04 0a0a 	and.w	sl, r4, sl
 80018e8:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80018ea:	6229      	str	r1, [r5, #32]
 80018ec:	f883 a000 	strb.w	sl, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 80018f0:	e9d5 3207 	ldrd	r3, r2, [r5, #28]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <Vector15C+0x9c>
      iqp->q_wrptr = iqp->q_buffer;
 80018f8:	69ab      	ldr	r3, [r5, #24]
 80018fa:	622b      	str	r3, [r5, #32]
  return (bool)(tqp->next != (const thread_t *)tqp);
 80018fc:	68eb      	ldr	r3, [r5, #12]
 80018fe:	42bb      	cmp	r3, r7
 8001900:	d0c6      	beq.n	8001890 <Vector15C+0x30>
  tqp->next             = tp->queue.next;
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	60ea      	str	r2, [r5, #12]
  (void) chSchReadyI(tp);
 8001906:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8001908:	6057      	str	r7, [r2, #4]
  tp->u.rdymsg = msg;
 800190a:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 800190e:	f7fe fe9f 	bl	8000650 <chSchReadyI>
    sr = u->SR;
 8001912:	6834      	ldr	r4, [r6, #0]
 8001914:	b2a4      	uxth	r4, r4
  while (sr & (USART_SR_RXNE | USART_SR_ORE | USART_SR_NE | USART_SR_FE |
 8001916:	f014 0f2f 	tst.w	r4, #47	; 0x2f
 800191a:	d1be      	bne.n	800189a <Vector15C+0x3a>
 800191c:	2300      	movs	r3, #0
 800191e:	f383 8811 	msr	BASEPRI, r3
  if ((cr1 & USART_CR1_TXEIE) && (sr & USART_SR_TXE)) {
 8001922:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001926:	d001      	beq.n	800192c <Vector15C+0xcc>
 8001928:	0622      	lsls	r2, r4, #24
 800192a:	d42f      	bmi.n	800198c <Vector15C+0x12c>
  if ((cr1 & USART_CR1_TCIE) && (sr & USART_SR_TC)) {
 800192c:	f018 0f40 	tst.w	r8, #64	; 0x40
 8001930:	d00b      	beq.n	800194a <Vector15C+0xea>
 8001932:	0663      	lsls	r3, r4, #25
 8001934:	d509      	bpl.n	800194a <Vector15C+0xea>
 8001936:	2320      	movs	r3, #32
 8001938:	f383 8811 	msr	BASEPRI, r3
    if (oqIsEmptyI(&sdp->oqueue)) {
 800193c:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001940:	429a      	cmp	r2, r3
 8001942:	d048      	beq.n	80019d6 <Vector15C+0x176>
 8001944:	2300      	movs	r3, #0
 8001946:	f383 8811 	msr	BASEPRI, r3
}
 800194a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 800194e:	f7fe bdd7 	b.w	8000500 <_port_irq_epilogue>
 8001952:	2004      	movs	r0, #4
 8001954:	f7fe fe94 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
  if (!iqIsFullI(iqp)) {
 8001958:	e9d5 3208 	ldrd	r3, r2, [r5, #32]
 800195c:	4293      	cmp	r3, r2
 800195e:	d1be      	bne.n	80018de <Vector15C+0x7e>
 8001960:	696a      	ldr	r2, [r5, #20]
 8001962:	2a00      	cmp	r2, #0
 8001964:	d0bb      	beq.n	80018de <Vector15C+0x7e>
 8001966:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800196a:	f7fe fe89 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
 800196e:	e78f      	b.n	8001890 <Vector15C+0x30>
 8001970:	2320      	movs	r3, #32
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800197a:	f7fe fe81 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
    u->SR = ~USART_SR_LBD;
 800197e:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8001982:	6033      	str	r3, [r6, #0]
 8001984:	2300      	movs	r3, #0
 8001986:	f383 8811 	msr	BASEPRI, r3
 800198a:	e773      	b.n	8001874 <Vector15C+0x14>
 800198c:	2320      	movs	r3, #32
 800198e:	f383 8811 	msr	BASEPRI, r3
  if (!oqIsEmptyI(oqp)) {
 8001992:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 8001996:	429a      	cmp	r2, r3
 8001998:	d029      	beq.n	80019ee <Vector15C+0x18e>
    oqp->q_counter++;
 800199a:	6baa      	ldr	r2, [r5, #56]	; 0x38
    if (oqp->q_rdptr >= oqp->q_top) {
 800199c:	6c29      	ldr	r1, [r5, #64]	; 0x40
    b = *oqp->q_rdptr++;
 800199e:	1c58      	adds	r0, r3, #1
    oqp->q_counter++;
 80019a0:	3201      	adds	r2, #1
 80019a2:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 80019a4:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 80019a6:	4288      	cmp	r0, r1
    b = *oqp->q_rdptr++;
 80019a8:	781f      	ldrb	r7, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 80019aa:	d301      	bcc.n	80019b0 <Vector15C+0x150>
      oqp->q_rdptr = oqp->q_buffer;
 80019ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80019ae:	64ab      	str	r3, [r5, #72]	; 0x48
  return (bool)(tqp->next != (const thread_t *)tqp);
 80019b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80019b2:	4a17      	ldr	r2, [pc, #92]	; (8001a10 <Vector15C+0x1b0>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d009      	beq.n	80019cc <Vector15C+0x16c>
  tqp->next             = tp->queue.next;
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	6329      	str	r1, [r5, #48]	; 0x30
  tp->u.rdymsg = msg;
 80019bc:	f04f 0c00 	mov.w	ip, #0
  tqp->next->queue.prev = (thread_t *)tqp;
 80019c0:	604a      	str	r2, [r1, #4]
  (void) chSchReadyI(tp);
 80019c2:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 80019c4:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80019c8:	f7fe fe42 	bl	8000650 <chSchReadyI>
      u->DR = b;
 80019cc:	6077      	str	r7, [r6, #4]
 80019ce:	2300      	movs	r3, #0
 80019d0:	f383 8811 	msr	BASEPRI, r3
 80019d4:	e7aa      	b.n	800192c <Vector15C+0xcc>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80019d6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0b3      	beq.n	8001944 <Vector15C+0xe4>
 80019dc:	2010      	movs	r0, #16
 80019de:	f7fe fe4f 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80019e2:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 80019e6:	ea08 0303 	and.w	r3, r8, r3
 80019ea:	60f3      	str	r3, [r6, #12]
 80019ec:	e7aa      	b.n	8001944 <Vector15C+0xe4>
  if (!oqIsEmptyI(oqp)) {
 80019ee:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80019f0:	2a00      	cmp	r2, #0
 80019f2:	d0d2      	beq.n	800199a <Vector15C+0x13a>
 80019f4:	2008      	movs	r0, #8
 80019f6:	f7fe fe43 	bl	8000680 <chEvtBroadcastFlagsI.constprop.12>
      u->CR1 = cr1 & ~USART_CR1_TXEIE;
 80019fa:	f64f 737f 	movw	r3, #65407	; 0xff7f
 80019fe:	ea08 0303 	and.w	r3, r8, r3
 8001a02:	60f3      	str	r3, [r6, #12]
 8001a04:	e7e3      	b.n	80019ce <Vector15C+0x16e>
 8001a06:	bf00      	nop
 8001a08:	20000800 	.word	0x20000800
 8001a0c:	2000080c 	.word	0x2000080c
 8001a10:	20000830 	.word	0x20000830
	...

08001a20 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8001a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 8001a24:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 8001a28:	693b      	ldr	r3, [r7, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;
 8001a30:	43d2      	mvns	r2, r2

  if ((sr & TIM_SR_CC1IF) != 0U)
 8001a32:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 8001a34:	613a      	str	r2, [r7, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 8001a36:	d403      	bmi.n	8001a40 <VectorB0+0x20>
}
 8001a38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001a3c:	f7fe bd60 	b.w	8000500 <_port_irq_epilogue>
 8001a40:	2320      	movs	r3, #32
 8001a42:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8001a46:	4c1e      	ldr	r4, [pc, #120]	; (8001ac0 <VectorB0+0xa0>)
 8001a48:	46a1      	mov	r9, r4
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8001a4a:	f04f 0800 	mov.w	r8, #0
  vtp = ch.vtlist.next;
 8001a4e:	f859 3f1c 	ldr.w	r3, [r9, #28]!
 8001a52:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8001a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8001a56:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  return (sysinterval_t)((systime_t)(end - start));
 8001a58:	1a45      	subs	r5, r0, r1
    if (nowdelta < vtp->delta) {
 8001a5a:	42aa      	cmp	r2, r5
 8001a5c:	d81c      	bhi.n	8001a98 <VectorB0+0x78>
 8001a5e:	2620      	movs	r6, #32
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001a60:	6818      	ldr	r0, [r3, #0]
      fn = vtp->func;
 8001a62:	f8d3 a00c 	ldr.w	sl, [r3, #12]
      ch.vtlist.lasttime += vtp->delta;
 8001a66:	4411      	add	r1, r2

      /* If the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001a68:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8001a6a:	62a1      	str	r1, [r4, #40]	; 0x28
      nowdelta -= vtp->delta;
 8001a6c:	eba5 0502 	sub.w	r5, r5, r2
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8001a70:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8001a74:	61e0      	str	r0, [r4, #28]
      vtp->func = NULL;
 8001a76:	f8c3 800c 	str.w	r8, [r3, #12]
  STM32_ST_TIM->DIER = 0U;
 8001a7a:	bf08      	it	eq
 8001a7c:	f8c7 800c 	streq.w	r8, [r7, #12]
 8001a80:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8001a84:	6918      	ldr	r0, [r3, #16]
 8001a86:	47d0      	blx	sl
 8001a88:	f386 8811 	msr	BASEPRI, r6
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8001a8c:	69e3      	ldr	r3, [r4, #28]
    }
    while (vtp->delta <= nowdelta);
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	4295      	cmp	r5, r2
 8001a92:	d3df      	bcc.n	8001a54 <VectorB0+0x34>
 8001a94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001a96:	e7e3      	b.n	8001a60 <VectorB0+0x40>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8001a98:	69e2      	ldr	r2, [r4, #28]
 8001a9a:	454a      	cmp	r2, r9
 8001a9c:	d009      	beq.n	8001ab2 <VectorB0+0x92>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8001a9e:	6891      	ldr	r1, [r2, #8]
  ch.vtlist.lasttime += nowdelta;
 8001aa0:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001aa2:	1b4d      	subs	r5, r1, r5
 8001aa4:	6095      	str	r5, [r2, #8]
  return systime + (systime_t)interval;
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	bf2c      	ite	cs
 8001aac:	18c0      	addcs	r0, r0, r3
 8001aae:	3002      	addcc	r0, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001ab0:	6378      	str	r0, [r7, #52]	; 0x34
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f383 8811 	msr	BASEPRI, r3
}
 8001ab8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001abc:	f7fe bd20 	b.w	8000500 <_port_irq_epilogue>
 8001ac0:	2000087c 	.word	0x2000087c
	...

08001ad0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001ad0:	b4f0      	push	{r4, r5, r6, r7}
 8001ad2:	4e14      	ldr	r6, [pc, #80]	; (8001b24 <__init_ram_areas+0x54>)
 8001ad4:	4d14      	ldr	r5, [pc, #80]	; (8001b28 <__init_ram_areas+0x58>)
 8001ad6:	4c15      	ldr	r4, [pc, #84]	; (8001b2c <__init_ram_areas+0x5c>)
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <__init_ram_areas+0x60>)
 8001ada:	4916      	ldr	r1, [pc, #88]	; (8001b34 <__init_ram_areas+0x64>)
 8001adc:	f106 0c70 	add.w	ip, r6, #112	; 0x70
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001ae0:	2700      	movs	r7, #0
    while (p < rap->clear_area) {
 8001ae2:	429c      	cmp	r4, r3
 8001ae4:	d911      	bls.n	8001b0a <__init_ram_areas+0x3a>
 8001ae6:	3904      	subs	r1, #4
 8001ae8:	461a      	mov	r2, r3
      *p = *tp;
 8001aea:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8001aee:	f842 0b04 	str.w	r0, [r2], #4
    while (p < rap->clear_area) {
 8001af2:	4294      	cmp	r4, r2
 8001af4:	d8f9      	bhi.n	8001aea <__init_ram_areas+0x1a>
 8001af6:	43da      	mvns	r2, r3
 8001af8:	4414      	add	r4, r2
 8001afa:	f024 0403 	bic.w	r4, r4, #3
 8001afe:	3404      	adds	r4, #4
 8001b00:	4423      	add	r3, r4
    while (p < rap->no_init_area) {
 8001b02:	429d      	cmp	r5, r3
 8001b04:	d903      	bls.n	8001b0e <__init_ram_areas+0x3e>
      *p = 0;
 8001b06:	f843 7b04 	str.w	r7, [r3], #4
    while (p < rap->no_init_area) {
 8001b0a:	429d      	cmp	r5, r3
 8001b0c:	d8fb      	bhi.n	8001b06 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8001b0e:	4566      	cmp	r6, ip
 8001b10:	d005      	beq.n	8001b1e <__init_ram_areas+0x4e>
 8001b12:	e9d6 1304 	ldrd	r1, r3, [r6, #16]
 8001b16:	e9d6 4506 	ldrd	r4, r5, [r6, #24]
 8001b1a:	3610      	adds	r6, #16
 8001b1c:	e7e1      	b.n	8001ae2 <__init_ram_areas+0x12>
#endif
}
 8001b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	08001c2c 	.word	0x08001c2c
 8001b28:	20000e3c 	.word	0x20000e3c
 8001b2c:	20000e3c 	.word	0x20000e3c
 8001b30:	20000e3c 	.word	0x20000e3c
 8001b34:	08001cd4 	.word	0x08001cd4
	...

08001b40 <__default_exit>:
void __default_exit(void) {
 8001b40:	e7fe      	b.n	8001b40 <__default_exit>
 8001b42:	bf00      	nop
	...

08001b50 <__late_init>:
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
	...

08001b60 <__core_init>:
}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
